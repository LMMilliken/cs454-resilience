0	str->list     Convert XML to URL List.     From Biligrab.
1	Downloads Dailymotion videos by URL.
2	Downloads Sina videos by URL.
3	Format text with color or other effects into ANSI escaped string.
4	Print a log message to standard error.
5	Detect operating system.
6	Splicing URLs according to video ID to get video details
7	Converts a string to a valid filename.
8	Downloads CBS videos by URL.
9	Override the original one         Ugly ugly dirty hack
10	Scans through a string for substrings matched some patterns.      Args:         text: A string to be scanned.         patterns: a list of regex pattern.      Returns:         a list if matched. empty if not.
11	Parses the query string of a URL and returns the value of a parameter.      Args:         url: A URL.         param: A string representing the name of the parameter.      Returns:         The value of the parameter.
12	Gets the content of a URL via sending a HTTP GET request.      Args:         url: A URL.         headers: Request headers used by the client.         decoded: Whether decode the response body using UTF-8 or the charset specified in Content-Type.      Returns:         The content as a string.
13	Post the content of a URL via sending a HTTP POST request.      Args:         url: A URL.         headers: Request headers used by the client.         decoded: Whether decode the response body using UTF-8 or the charset specified in Content-Type.      Returns:         The content as a string.
14	Parses host name and port number from a string.
15	Checks if a task is either queued or running in this executor          :param task_instance: TaskInstance         :return: True if the task is known to this executor
16	Returns and flush the event buffer. In case dag_ids is specified         it will only return and flush events for the given dag_ids. Otherwise         it returns and flushes all          :param dag_ids: to dag_ids to return events for, if None returns all         :return: a dict of events
17	Returns a snowflake.connection object
18	returns aws_access_key_id, aws_secret_access_key         from extra          intended to be used by external import and export statements
19	Fetches a field from extras, and returns it. This is some Airflow         magic. The grpc hook type adds custom UI elements         to the hook page, which allow admins to specify scopes, credential pem files, etc.         They get formatted as shown below.
20	Executes SQL using psycopg2 copy_expert method.         Necessary to execute COPY command without access to a superuser.          Note: if this method is called with a "COPY FROM" statement and         the specified input file does not exist, it creates an empty         file and no data is loaded, but the operation succeeds.         So if users want to be aware when the input file does not exist,         they have to check its existence by themselves.
21	Dumps a database table into a tab-delimited file
22	Uploads the file to Google cloud storage
23	Gets the max partition for a table.      :param schema: The hive schema the table lives in     :type schema: str     :param table: The hive table you are interested in, supports the dot         notation as in "my_database.my_table", if a dot is found,         the schema param is disregarded     :type table: str     :param metastore_conn_id: The hive connection you are interested in.         If your default is set you don't need to use this parameter.     :type metastore_conn_id: str     :param filter_map: partition_key:partition_value map used for partition filtering,                        e.g. {'key1': 'value1', 'key2': 'value2'}.                        Only partitions matching all partition_key:partition_value                        pairs will be considered as candidates of max partition.     :type filter_map: map     :param field: the field to get the max value from. If there's only         one partition field, this will be inferred     :type field: str      >>> max_partition('airflow.static_babynames_partitioned')     '2015-01-01'
24	Returns a mysql connection object
25	Returns the state of a TaskInstance at the command line.     >>> airflow task_state tutorial sleep 2015-01-01     success
26	Retrieves connection to Cloud Translate          :return: Google Cloud Translate client object.         :rtype: Client
27	Translate a string or list of strings.          See https://cloud.google.com/translate/docs/translating-text          :type values: str or list         :param values: String or list of strings to translate.          :type target_language: str         :param target_language: The language to translate results into. This                                 is required by the API and defaults to                                 the target language of the current instance.          :type format_: str         :param format_: (Optional) One of ``text`` or ``html``, to specify                         if the input text is plain text or HTML.          :type source_language: str or None         :param source_language: (Optional) The language of the text to                                 be translated.          :type model: str or None         :param model: (Optional) The model used to translate the text, such                       as ``'base'`` or ``'nmt'``.          :rtype: str or list         :returns: A list of dictionaries for each queried value. Each                   dictionary typically contains three keys (though not                   all will be present in all cases)                    * ``detectedSourceLanguage``: The detected language (as an                     ISO 639-1 language code) of the text.                   * ``translatedText``: The translation of the text into the                     target language.                   * ``input``: The corresponding input value.                   * ``model``: The model used to translate the text.                    If only a single value is passed, then only a single                   dictionary will be returned.         :raises: :class:`~exceptions.ValueError` if the number of                  values and translations differ.
28	Retrieves a resource containing information about a Cloud SQL instance.          :param instance: Database instance ID. This does not include the project ID.         :type instance: str         :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: A Cloud SQL instance resource.         :rtype: dict
29	Creates a new Cloud SQL instance.          :param body: Body required by the Cloud SQL insert API, as described in             https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/insert#request-body.         :type body: dict         :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
30	Updates settings of a Cloud SQL instance.          Caution: This is not a partial update, so you must include values for         all the settings that you want to retain.          :param body: Body required by the Cloud SQL patch API, as described in             https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/patch#request-body.         :type body: dict         :param instance: Cloud SQL instance ID. This does not include the project ID.         :type instance: str         :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
31	Deletes a Cloud SQL instance.          :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :param instance: Cloud SQL instance ID. This does not include the project ID.         :type instance: str         :return: None
32	Retrieves a database resource from a Cloud SQL instance.          :param instance: Database instance ID. This does not include the project ID.         :type instance: str         :param database: Name of the database in the instance.         :type database: str         :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: A Cloud SQL database resource, as described in             https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases#resource.         :rtype: dict
33	Creates a new database inside a Cloud SQL instance.          :param instance: Database instance ID. This does not include the project ID.         :type instance: str         :param body: The request body, as described in             https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases/insert#request-body.         :type body: dict         :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
34	Updates a database resource inside a Cloud SQL instance.          This method supports patch semantics.         See https://cloud.google.com/sql/docs/mysql/admin-api/how-tos/performance#patch.          :param instance: Database instance ID. This does not include the project ID.         :type instance: str         :param database: Name of the database to be updated in the instance.         :type database: str         :param body: The request body, as described in             https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases/insert#request-body.         :type body: dict         :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
35	Deletes a database from a Cloud SQL instance.          :param instance: Database instance ID. This does not include the project ID.         :type instance: str         :param database: Name of the database to be deleted in the instance.         :type database: str         :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
36	Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump         or CSV file.          :param instance: Database instance ID of the Cloud SQL instance. This does not include the             project ID.         :type instance: str         :param body: The request body, as described in             https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/export#request-body         :type body: dict         :param project_id: Project ID of the project that contains the instance. If set             to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
37	Starts Cloud SQL Proxy.          You have to remember to stop the proxy if you started it!
38	Stops running proxy.          You should stop the proxy after you stop using it.
39	Returns version of the Cloud SQL Proxy.
40	Create connection in the Connection table, according to whether it uses         proxy, TCP, UNIX sockets, SSL. Connection ID will be randomly generated.          :param session: Session of the SQL Alchemy ORM (automatically generated with                         decorator).
41	Retrieves the dynamically created connection from the Connection table.          :param session: Session of the SQL Alchemy ORM (automatically generated with                         decorator).
42	Delete the dynamically created connection from the Connection table.          :param session: Session of the SQL Alchemy ORM (automatically generated with                         decorator).
43	Retrieve Cloud SQL Proxy runner. It is used to manage the proxy         lifecycle per task.          :return: The Cloud SQL Proxy runner.         :rtype: CloudSqlProxyRunner
44	Retrieve database hook. This is the actual Postgres or MySQL database hook         that uses proxy or connects directly to the Google Cloud SQL database.
45	Clean up database hook after it was used.
46	Reserve free TCP port to be used by Cloud SQL Proxy
47	Replaces invalid MLEngine job_id characters with '_'.      This also adds a leading 'z' in case job_id starts with an invalid     character.      Args:         job_id: A job_id str that may have invalid characters.      Returns:         A valid job_id representation.
48	Extract error code from ftp exception
49	Remove any existing DAG runs for the perf test DAGs.
50	Remove any existing task instances for the perf test DAGs.
51	Toggle the pause state of the DAGs in the test.
52	Print operational metrics for the scheduler test.
53	Override the scheduler heartbeat to determine when the test is complete
54	Invoke Lambda Function
55	Creates Operators needed for model evaluation and returns.      It gets prediction over inputs via Cloud ML Engine BatchPrediction API by     calling MLEngineBatchPredictionOperator, then summarize and validate     the result via Cloud Dataflow using DataFlowPythonOperator.      For details and pricing about Batch prediction, please refer to the website     https://cloud.google.com/ml-engine/docs/how-tos/batch-predict     and for Cloud Dataflow, https://cloud.google.com/dataflow/docs/      It returns three chained operators for prediction, summary, and validation,     named as <prefix>-prediction, <prefix>-summary, and <prefix>-validation,     respectively.     (<prefix> should contain only alphanumeric characters or hyphen.)      The upstream and downstream can be set accordingly like:       pred, _, val = create_evaluate_ops(...)       pred.set_upstream(upstream_op)       ...       downstream_op.set_upstream(val)      Callers will provide two python callables, metric_fn and validate_fn, in     order to customize the evaluation behavior as they wish.     - metric_fn receives a dictionary per instance derived from json in the       batch prediction result. The keys might vary depending on the model.       It should return a tuple of metrics.     - validation_fn receives a dictionary of the averaged metrics that metric_fn       generated over all instances.       The key/value of the dictionary matches to what's given by       metric_fn_and_keys arg.       The dictionary contains an additional metric, 'count' to represent the       total number of instances received for evaluation.       The function would raise an exception to mark the task as failed, in a       case the validation result is not okay to proceed (i.e. to set the trained       version as default).      Typical examples are like this:      def get_metric_fn_and_keys():         import math  # imports should be outside of the metric_fn below.         def error_and_squared_error(inst):             label = float(inst['input_label'])             classes = float(inst['classes'])  # 0 or 1             err = abs(classes-label)             squared_err = math.pow(classes-label, 2)             return (err, squared_err)  # returns a tuple.         return error_and_squared_error, ['err', 'mse']  # key order must match.      def validate_err_and_count(summary):         if summary['err'] > 0.2:             raise ValueError('Too high err>0.2; summary=%s' % summary)         if summary['mse'] > 0.05:             raise ValueError('Too high mse>0.05; summary=%s' % summary)         if summary['count'] < 1000:             raise ValueError('Too few instances<1000; summary=%s' % summary)         return summary      For the details on the other BatchPrediction-related arguments (project_id,     job_id, region, data_format, input_paths, prediction_path, model_uri),     please refer to MLEngineBatchPredictionOperator too.      :param task_prefix: a prefix for the tasks. Only alphanumeric characters and         hyphen are allowed (no underscores), since this will be used as dataflow         job name, which doesn't allow other characters.     :type task_prefix: str      :param data_format: either of 'TEXT', 'TF_RECORD', 'TF_RECORD_GZIP'     :type data_format: str      :param input_paths: a list of input paths to be sent to BatchPrediction.     :type input_paths: list[str]      :param prediction_path: GCS path to put the prediction results in.     :type prediction_path: str      :param metric_fn_and_keys: a tuple of metric_fn and metric_keys:         - metric_fn is a function that accepts a dictionary (for an instance),           and returns a tuple of metric(s) that it calculates.         - metric_keys is a list of strings to denote the key of each metric.     :type metric_fn_and_keys: tuple of a function and a list[str]      :param validate_fn: a function to validate whether the averaged metric(s) is         good enough to push the model.     :type validate_fn: function      :param batch_prediction_job_id: the id to use for the Cloud ML Batch         prediction job. Passed directly to the MLEngineBatchPredictionOperator as         the job_id argument.     :type batch_prediction_job_id: str      :param project_id: the Google Cloud Platform project id in which to execute         Cloud ML Batch Prediction and Dataflow jobs. If None, then the `dag`'s         `default_args['project_id']` will be used.     :type project_id: str      :param region: the Google Cloud Platform region in which to execute Cloud ML         Batch Prediction and Dataflow jobs. If None, then the `dag`'s         `default_args['region']` will be used.     :type region: str      :param dataflow_options: options to run Dataflow jobs. If None, then the         `dag`'s `default_args['dataflow_default_options']` will be used.     :type dataflow_options: dictionary      :param model_uri: GCS path of the model exported by Tensorflow using         tensorflow.estimator.export_savedmodel(). It cannot be used with         model_name or version_name below. See MLEngineBatchPredictionOperator for         more detail.     :type model_uri: str      :param model_name: Used to indicate a model to use for prediction. Can be         used in combination with version_name, but cannot be used together with         model_uri. See MLEngineBatchPredictionOperator for more detail. If None,         then the `dag`'s `default_args['model_name']` will be used.     :type model_name: str      :param version_name: Used to indicate a model version to use for prediction,         in combination with model_name. Cannot be used together with model_uri.         See MLEngineBatchPredictionOperator for more detail. If None, then the         `dag`'s `default_args['version_name']` will be used.     :type version_name: str      :param dag: The `DAG` to use for all Operators.     :type dag: airflow.models.DAG      :returns: a tuple of three operators, (prediction, summary, validation)     :rtype: tuple(DataFlowPythonOperator, DataFlowPythonOperator,                   PythonOperator)
56	Creates the directory specified by path, creating intermediate directories     as necessary. If directory already exists, this is a no-op.      :param path: The directory to create     :type path: str     :param mode: The mode to give to the directory e.g. 0o755, ignores umask     :type mode: int
57	A small helper function to convert a string to a numeric value     if appropriate      :param s: the string to be converted     :type s: str
58	Make a naive datetime.datetime in a given time zone aware.      :param value: datetime     :param timezone: timezone     :return: localized datetime in settings.TIMEZONE or timezone
59	Make an aware datetime.datetime naive in a given time zone.      :param value: datetime     :param timezone: timezone     :return: naive datetime
60	Wrapper around datetime.datetime that adds settings.TIMEZONE if tzinfo not specified      :return: datetime.datetime
61	Establish a connection to druid broker.
62	Returns http session for use with requests          :param headers: additional headers to be passed through as a dictionary         :type headers: dict
63	Performs the request          :param endpoint: the endpoint to be called i.e. resource/v1/query?         :type endpoint: str         :param data: payload to be uploaded or request parameters         :type data: dict         :param headers: additional headers to be passed through as a dictionary         :type headers: dict         :param extra_options: additional options to be used when executing the request             i.e. {'check_response': False} to avoid checking raising exceptions on non             2XX or 3XX status codes         :type extra_options: dict
64	Checks the status code and raise an AirflowException exception on non 2XX or 3XX         status codes          :param response: A requests response object         :type response: requests.response
65	Grabs extra options like timeout and actually runs the request,         checking for the result          :param session: the session to be used to execute the request         :type session: requests.Session         :param prepped_request: the prepared request generated in run()         :type prepped_request: session.prepare_request         :param extra_options: additional options to be used when executing the request             i.e. {'check_response': False} to avoid checking raising exceptions on non 2XX             or 3XX status codes         :type extra_options: dict
66	Contextmanager that will create and teardown a session.
67	Function decorator that provides a session if it isn't provided.     If you want to reuse a session or run the function as part of a     database transaction, you pass it to the function, if not this wrapper     will create one and close it for you.
68	Clear out the database
69	Parses some DatabaseError to provide a better error message
70	Get a set of records from Presto
71	Get a pandas dataframe from a sql query.
72	Execute the statement against Presto. Can be used to create views.
73	A generic way to insert a set of tuples into a table.          :param table: Name of the target table         :type table: str         :param rows: The rows to insert into the table         :type rows: iterable of tuples         :param target_fields: The names of the columns to fill in the table         :type target_fields: iterable of strings
74	Return a cosmos db client.
75	Checks if a collection exists in CosmosDB.
76	Creates a new collection in the CosmosDB database.
77	Checks if a database exists in CosmosDB.
78	Creates a new database in CosmosDB.
79	Deletes an existing database in CosmosDB.
80	Deletes an existing collection in the CosmosDB database.
81	Insert a list of new documents into an existing collection in the CosmosDB database.
82	Delete an existing document out of a collection in the CosmosDB database.
83	Get a document from an existing collection in the CosmosDB database.
84	Get a list of documents from an existing collection in the CosmosDB database via SQL query.
85	Returns the Cloud Function with the given name.          :param name: Name of the function.         :type name: str         :return: A Cloud Functions object representing the function.         :rtype: dict
86	Creates a new function in Cloud Function in the location specified in the body.          :param location: The location of the function.         :type location: str         :param body: The body required by the Cloud Functions insert API.         :type body: dict         :param project_id: Optional, Google Cloud Project project_id where the function belongs.             If set to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
87	Updates Cloud Functions according to the specified update mask.          :param name: The name of the function.         :type name: str         :param body: The body required by the cloud function patch API.         :type body: dict         :param update_mask: The update mask - array of fields that should be patched.         :type update_mask: [str]         :return: None
88	Uploads zip file with sources.          :param location: The location where the function is created.         :type location: str         :param zip_path: The path of the valid .zip file to upload.         :type zip_path: str         :param project_id: Optional, Google Cloud Project project_id where the function belongs.             If set to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: The upload URL that was returned by generateUploadUrl method.
89	Deletes the specified Cloud Function.          :param name: The name of the function.         :type name: str         :return: None
90	Wrapper around the private _get_dep_statuses method that contains some global         checks for all dependencies.          :param ti: the task instance to get the dependency status for         :type ti: airflow.models.TaskInstance         :param session: database session         :type session: sqlalchemy.orm.session.Session         :param dep_context: the context for which this dependency should be evaluated for         :type dep_context: DepContext
91	Returns whether or not this dependency is met for a given task instance. A         dependency is considered met if all of the dependency statuses it reports are         passing.          :param ti: the task instance to see if this dependency is met for         :type ti: airflow.models.TaskInstance         :param session: database session         :type session: sqlalchemy.orm.session.Session         :param dep_context: The context this dependency is being checked under that stores             state that can be used by this dependency.         :type dep_context: BaseDepContext
92	Returns an iterable of strings that explain why this dependency wasn't met.          :param ti: the task instance to see if this dependency is met for         :type ti: airflow.models.TaskInstance         :param session: database session         :type session: sqlalchemy.orm.session.Session         :param dep_context: The context this dependency is being checked under that stores             state that can be used by this dependency.         :type dep_context: BaseDepContext
93	Parses a config file for s3 credentials. Can currently     parse boto, s3cmd.conf and AWS SDK config formats      :param config_file_name: path to the config file     :type config_file_name: str     :param config_format: config type. One of "boto", "s3cmd" or "aws".         Defaults to "boto"     :type config_format: str     :param profile: profile name in AWS type config file     :type profile: str
94	Get the underlying `botocore.Credentials` object.          This contains the following authentication attributes: access_key, secret_key and token.
95	Returns verticaql connection object
96	Ensure all logging output has been flushed
97	If the path contains a folder with a .zip suffix, then     the folder is treated as a zip archive and path to zip is returned.
98	Traverse a directory and look for Python files.      :param directory: the directory to traverse     :type directory: unicode     :param safe_mode: whether to use a heuristic to determine whether a file         contains Airflow DAG definitions     :return: a list of paths to Python files in the specified directory     :rtype: list[unicode]
99	Construct a TaskInstance from the database based on the primary key          :param session: DB session.         :param lock_for_update: if True, indicates that the database should             lock the TaskInstance (issuing a FOR UPDATE clause) until the             session is committed.
100	Launch DagFileProcessorManager processor and start DAG parsing loop in manager.
101	Send termination signal to DAG parsing processor manager         and expect it to terminate all DAG file processors.
102	Helper method to clean up DAG file processors to avoid leaving orphan processes.
103	Use multiple processes to parse and generate tasks for the         DAGs in parallel. By processing them in separate processes,         we can get parallelism and isolation from potentially harmful         user code.
104	Parse DAG files repeatedly in a standalone loop.
105	Parse DAG files in a loop controlled by DagParsingSignal.         Actual DAG parsing loop will run once upon receiving one         agent heartbeat message and will report done when finished the loop.
106	Refresh file paths from dag dir if we haven't done it for too long.
107	Occasionally print out stats about how fast the files are getting processed
108	Clears import errors for files that no longer exist.          :param session: session for ORM operations         :type session: sqlalchemy.orm.session.Session
109	Print out stats about how files are getting processed.          :param known_file_paths: a list of file paths that may contain Airflow             DAG definitions         :type known_file_paths: list[unicode]         :return: None
110	Update this with a new set of paths to DAG definition files.          :param new_file_paths: list of paths to DAG definition files         :type new_file_paths: list[unicode]         :return: None
111	Sleeps until all the processors are done.
112	This should be periodically called by the manager loop. This method will         kick off new processes to process DAG definition files and read the         results from the finished processors.          :return: a list of SimpleDags that were produced by processors that             have finished since the last time this was called         :rtype: list[airflow.utils.dag_processing.SimpleDag]
113	Kill all child processes on exit since we don't want to leave         them as orphaned.
114	Opens a ssh connection to the remote host.          :rtype: paramiko.client.SSHClient
115	Creates a transfer job that runs periodically.          :param body: (Required) A request body, as described in             https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs/patch#request-body         :type body: dict         :return: transfer job.             See:             https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs#TransferJob         :rtype: dict
116	Gets the latest state of a long-running operation in Google Storage         Transfer Service.          :param job_name: (Required) Name of the job to be fetched         :type job_name: str         :param project_id: (Optional) the ID of the project that owns the Transfer             Job. If set to None or missing, the default project_id from the GCP             connection is used.         :type project_id: str         :return: Transfer Job         :rtype: dict
117	Lists long-running operations in Google Storage Transfer         Service that match the specified filter.          :param filter: (Required) A request filter, as described in             https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs/list#body.QUERY_PARAMETERS.filter         :type filter: dict         :return: List of Transfer Jobs         :rtype: list[dict]
118	Updates a transfer job that runs periodically.          :param job_name: (Required) Name of the job to be updated         :type job_name: str         :param body: A request body, as described in             https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs/patch#request-body         :type body: dict         :return: If successful, TransferJob.         :rtype: dict
119	Deletes a transfer job. This is a soft delete. After a transfer job is         deleted, the job and all the transfer executions are subject to garbage         collection. Transfer jobs become eligible for garbage collection         30 days after soft delete.          :param job_name: (Required) Name of the job to be deleted         :type job_name: str         :param project_id: (Optional) the ID of the project that owns the Transfer             Job. If set to None or missing, the default project_id from the GCP             connection is used.         :type project_id: str         :rtype: None
120	Cancels an transfer operation in Google Storage Transfer Service.          :param operation_name: Name of the transfer operation.         :type operation_name: str         :rtype: None
121	Pauses an transfer operation in Google Storage Transfer Service.          :param operation_name: (Required) Name of the transfer operation.         :type operation_name: str         :rtype: None
122	Resumes an transfer operation in Google Storage Transfer Service.          :param operation_name: (Required) Name of the transfer operation.         :type operation_name: str         :rtype: None
123	Waits until the job reaches the expected state.          :param job: Transfer job             See:             https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs#TransferJob         :type job: dict         :param expected_statuses: State that is expected             See:             https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferOperations#Status         :type expected_statuses: set[str]         :param timeout:         :type timeout: time in which the operation must end in seconds         :rtype: None
124	Returns all task reschedules for the task instance and try number,         in ascending order.          :param task_instance: the task instance to find task reschedules for         :type task_instance: airflow.models.TaskInstance
125	Returns the number of slots open at the moment
126	Runs command and returns stdout
127	Remove an option if it exists in config from a file or         default config. If both of config have the same option, this removes         the option in both configs unless remove_default=False.
128	Returns the section as a dict. Values are converted to int, float, bool         as required.          :param section: section from the config         :rtype: dict
129	Allocate IDs for incomplete keys.          .. seealso::             https://cloud.google.com/datastore/docs/reference/rest/v1/projects/allocateIds          :param partial_keys: a list of partial keys.         :type partial_keys: list         :return: a list of full keys.         :rtype: list
130	Begins a new transaction.          .. seealso::             https://cloud.google.com/datastore/docs/reference/rest/v1/projects/beginTransaction          :return: a transaction handle.         :rtype: str
131	Commit a transaction, optionally creating, deleting or modifying some entities.          .. seealso::             https://cloud.google.com/datastore/docs/reference/rest/v1/projects/commit          :param body: the body of the commit request.         :type body: dict         :return: the response body of the commit request.         :rtype: dict
132	Lookup some entities by key.          .. seealso::             https://cloud.google.com/datastore/docs/reference/rest/v1/projects/lookup          :param keys: the keys to lookup.         :type keys: list         :param read_consistency: the read consistency to use. default, strong or eventual.                                  Cannot be used with a transaction.         :type read_consistency: str         :param transaction: the transaction to use, if any.         :type transaction: str         :return: the response body of the lookup request.         :rtype: dict
133	Roll back a transaction.          .. seealso::             https://cloud.google.com/datastore/docs/reference/rest/v1/projects/rollback          :param transaction: the transaction to roll back.         :type transaction: str
134	Run a query for entities.          .. seealso::             https://cloud.google.com/datastore/docs/reference/rest/v1/projects/runQuery          :param body: the body of the query request.         :type body: dict         :return: the batch of query results.         :rtype: dict
135	Gets the latest state of a long-running operation.          .. seealso::             https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.operations/get          :param name: the name of the operation resource.         :type name: str         :return: a resource operation instance.         :rtype: dict
136	Deletes the long-running operation.          .. seealso::             https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.operations/delete          :param name: the name of the operation resource.         :type name: str         :return: none if successful.         :rtype: dict
137	Poll backup operation state until it's completed.          :param name: the name of the operation resource         :type name: str         :param polling_interval_in_seconds: The number of seconds to wait before calling another request.         :type polling_interval_in_seconds: int         :return: a resource operation instance.         :rtype: dict
138	Export entities from Cloud Datastore to Cloud Storage for backup.          .. note::             Keep in mind that this requests the Admin API not the Data API.          .. seealso::             https://cloud.google.com/datastore/docs/reference/admin/rest/v1/projects/export          :param bucket: The name of the Cloud Storage bucket.         :type bucket: str         :param namespace: The Cloud Storage namespace path.         :type namespace: str         :param entity_filter: Description of what data from the project is included in the export.         :type entity_filter: dict         :param labels: Client-assigned labels.         :type labels: dict of str         :return: a resource operation instance.         :rtype: dict
139	Import a backup from Cloud Storage to Cloud Datastore.          .. note::             Keep in mind that this requests the Admin API not the Data API.          .. seealso::             https://cloud.google.com/datastore/docs/reference/admin/rest/v1/projects/import          :param bucket: The name of the Cloud Storage bucket.         :type bucket: str         :param file: the metadata file written by the projects.export operation.         :type file: str         :param namespace: The Cloud Storage namespace path.         :type namespace: str         :param entity_filter: specify which kinds/namespaces are to be imported.         :type entity_filter: dict         :param labels: Client-assigned labels.         :type labels: dict of str         :return: a resource operation instance.         :rtype: dict
140	Publish a message to a topic or an endpoint.          :param target_arn: either a TopicArn or an EndpointArn         :type target_arn: str         :param message: the default message you want to send         :param message: str
141	Fetch the hostname using the callable from the config or using     `socket.getfqdn` as a fallback.
142	Retrieves connection to Cloud Natural Language service.          :return: Cloud Natural Language service object         :rtype: google.cloud.language_v1.LanguageServiceClient
143	Finds named entities in the text along with entity types,         salience, mentions for each entity, and other properties.          :param document: Input document.             If a dict is provided, it must be of the same form as the protobuf message Document         :type document: dict or class google.cloud.language_v1.types.Document         :param encoding_type: The encoding type used by the API to calculate offsets.         :type encoding_type: google.cloud.language_v1.types.EncodingType         :param retry: A retry object used to retry requests. If None is specified, requests will not be             retried.         :type retry: google.api_core.retry.Retry         :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if             retry is specified, the timeout applies to each individual attempt.         :type timeout: float         :param metadata: Additional metadata that is provided to the method.         :type metadata: sequence[tuple[str, str]]]         :rtype: google.cloud.language_v1.types.AnalyzeEntitiesResponse
144	A convenience method that provides all the features that analyzeSentiment,         analyzeEntities, and analyzeSyntax provide in one call.          :param document: Input document.             If a dict is provided, it must be of the same form as the protobuf message Document         :type document: dict or google.cloud.language_v1.types.Document         :param features: The enabled features.             If a dict is provided, it must be of the same form as the protobuf message Features         :type features: dict or google.cloud.language_v1.enums.Features         :param encoding_type: The encoding type used by the API to calculate offsets.         :type encoding_type: google.cloud.language_v1.types.EncodingType         :param retry: A retry object used to retry requests. If None is specified, requests will not be             retried.         :type retry: google.api_core.retry.Retry         :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if             retry is specified, the timeout applies to each individual attempt.         :type timeout: float         :param metadata: Additional metadata that is provided to the method.         :type metadata: sequence[tuple[str, str]]]         :rtype: google.cloud.language_v1.types.AnnotateTextResponse
145	Classifies a document into categories.          :param document: Input document.             If a dict is provided, it must be of the same form as the protobuf message Document         :type document: dict or class google.cloud.language_v1.types.Document         :param retry: A retry object used to retry requests. If None is specified, requests will not be             retried.         :type retry: google.api_core.retry.Retry         :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if             retry is specified, the timeout applies to each individual attempt.         :type timeout: float         :param metadata: Additional metadata that is provided to the method.         :type metadata: sequence[tuple[str, str]]]         :rtype: google.cloud.language_v1.types.AnalyzeEntitiesResponse
146	Gets template fields for specific operator class.      :param fullname: Full path to operator class.         For example: ``airflow.contrib.operators.gcp_vision_operator.CloudVisionProductSetCreateOperator``     :return: List of template field     :rtype: list[str]
147	A role that allows you to include a list of template fields in the middle of the text. This is especially     useful when writing guides describing how to use the operator.     The result is a list of fields where each field is shorted in the literal block.      Sample usage::      :template-fields:`airflow.contrib.operators.gcp_natural_language_operator.CloudLanguageAnalyzeSentimentOperator`      For further information look at:      * [http://docutils.sourceforge.net/docs/howto/rst-roles.html](Creating reStructuredText Interpreted       Text Roles)
148	Properly close pooled database connections
149	Ensures that certain subfolders of AIRFLOW_HOME are on the classpath
150	Gets the returned Celery result from the Airflow task         ID provided to the sensor, and returns True if the         celery result has been finished execution.          :param context: Airflow's execution context         :type context: dict         :return: True if task has been executed, otherwise False         :rtype: bool
151	Return true if the ticket cache contains "conf" information as is found     in ticket caches of Kerberos 1.8.1 or later. This is incompatible with the     Sun Java Krb5LoginModule in Java6, so we need to take an action to work     around it.
152	Transforms a SQLAlchemy model instance into a dictionary
153	Yield successive chunks of a given size from a list of items
154	Reduce the given list of items by splitting it into chunks     of the given size and passing each chunk through the reducer
155	Given a number of tasks, builds a dependency chain.      chain(task_1, task_2, task_3, task_4)      is equivalent to      task_1.set_downstream(task_2)     task_2.set_downstream(task_3)     task_3.set_downstream(task_4)
156	Returns a pretty ascii table from tuples      If namedtuple are used, the table will have headers
157	Given task instance, try_number, filename_template, return the rendered log     filename      :param ti: task instance     :param try_number: try_number of the task     :param filename_template: filename template, which can be jinja template or         python string template
158	Returns a Google Cloud Dataproc service object.
159	Awaits for Google Cloud Dataproc Operation to complete.
160	Coerces content or all values of content if it is a dict to a string. The     function will throw if content contains non-string or non-numeric types.      The reason why we have this function is because the ``self.json`` field must be a     dict with only string values. This is because ``render_template`` will fail     for numerical values.
161	Handles the Airflow + Databricks lifecycle logic for a Databricks operator      :param operator: Databricks operator being handled     :param context: Airflow context
162	Run an pig script using the pig cli          >>> ph = PigCliHook()         >>> result = ph.run_cli("ls /;")         >>> ("hdfs://" in result)         True
163	Fetch and return the state of the given celery task. The scope of this function is     global so that it can be called by subprocesses in the pool.      :param celery_task: a tuple of the Celery task key and the async Celery object used         to fetch the task's state     :type celery_task: tuple(str, celery.result.AsyncResult)     :return: a tuple of the Celery task key and the Celery state of the task     :rtype: tuple[str, str]
164	How many Celery tasks should each worker process send.          :return: Number of tasks that should be sent per process         :rtype: int
165	How many Celery tasks should be sent to each worker process.          :return: Number of tasks that should be used per process         :rtype: int
166	Like a Python builtin dict object, setdefault returns the current value         for a key, and if it isn't there, stores the default value and returns it.          :param key: Dict key for this Variable         :type key: str         :param default: Default value to set and return if the variable             isn't already in the DB         :type default: Mixed         :param deserialize_json: Store this as a JSON encoded value in the DB             and un-encode it when retrieving a value         :return: Mixed
167	Returns a Google MLEngine service object.
168	Launches a MLEngine job and wait for it to reach a terminal state.          :param project_id: The Google Cloud project id within which MLEngine             job will be launched.         :type project_id: str          :param job: MLEngine Job object that should be provided to the MLEngine             API, such as: ::                  {                   'jobId': 'my_job_id',                   'trainingInput': {                     'scaleTier': 'STANDARD_1',                     ...                   }                 }          :type job: dict          :param use_existing_job_fn: In case that a MLEngine job with the same             job_id already exist, this method (if provided) will decide whether             we should use this existing job, continue waiting for it to finish             and returning the job object. It should accepts a MLEngine job             object, and returns a boolean value indicating whether it is OK to             reuse the existing job. If 'use_existing_job_fn' is not provided,             we by default reuse the existing MLEngine job.         :type use_existing_job_fn: function          :return: The MLEngine job object if the job successfully reach a             terminal state (which might be FAILED or CANCELLED state).         :rtype: dict
169	Gets a MLEngine job based on the job name.          :return: MLEngine job object if succeed.         :rtype: dict          Raises:             googleapiclient.errors.HttpError: if HTTP error is returned from server
170	Waits for the Job to reach a terminal state.          This method will periodically check the job state until the job reach         a terminal state.          Raises:             googleapiclient.errors.HttpError: if HTTP error is returned when getting             the job
171	Creates the Version on Google Cloud ML Engine.          Returns the operation if the version was created successfully and         raises an error otherwise.
172	Sets a version to be the default. Blocks until finished.
173	Lists all available versions of a model. Blocks until finished.
174	Deletes the given version of a model. Blocks until finished.
175	Create a Model. Blocks until finished.
176	Gets a Model. Blocks until finished.
177	Write batch items to dynamodb table with provisioned throughout capacity.
178	Integrate plugins to the context.
179	Creates a new instance of the configured executor if none exists and returns it
180	Creates a new instance of the named executor.     In case the executor name is not know in airflow,     look for it in the plugins
181	Handles error callbacks when using Segment with segment_debug_mode set to True
182	Returns a mssql connection object
183	Trigger a new dag run for a Dag with an execution date of now unless     specified in the data.
184	Delete all DB records related to the specified Dag.
185	Returns a JSON with a task's public instance variables.
186	Get all pools.
187	Create a pool.
188	Delete pool.
189	Create a new container group          :param resource_group: the name of the resource group         :type resource_group: str         :param name: the name of the container group         :type name: str         :param container_group: the properties of the container group         :type container_group: azure.mgmt.containerinstance.models.ContainerGroup
190	Get the state and exitcode of a container group          :param resource_group: the name of the resource group         :type resource_group: str         :param name: the name of the container group         :type name: str         :return: A tuple with the state, exitcode, and details.             If the exitcode is unknown 0 is returned.         :rtype: tuple(state,exitcode,details)
191	Get the messages of a container group          :param resource_group: the name of the resource group         :type resource_group: str         :param name: the name of the container group         :type name: str         :return: A list of the event messages         :rtype: list[str]
192	Get the tail from logs of a container group          :param resource_group: the name of the resource group         :type resource_group: str         :param name: the name of the container group         :type name: str         :param tail: the size of the tail         :type tail: int         :return: A list of log messages         :rtype: list[str]
193	Delete a container group          :param resource_group: the name of the resource group         :type resource_group: str         :param name: the name of the container group         :type name: str
194	Test if a container group exists          :param resource_group: the name of the resource group         :type resource_group: str         :param name: the name of the container group         :type name: str
195	Function decorator that Looks for an argument named "default_args", and     fills the unspecified arguments from it.      Since python2.* isn't clear about which arguments are missing when     calling a function, and that this can be quite confusing with multi-level     inheritance and argument defaults, this decorator also alerts with     specific information about the missing arguments.
196	Builds an ingest query for an HDFS TSV load.          :param static_path: The path on hdfs where the data is         :type static_path: str         :param columns: List of all the columns that are available         :type columns: list
197	Check for message on subscribed channels and write to xcom the message with key ``message``          An example of message ``{'type': 'message', 'pattern': None, 'channel': b'test', 'data': b'hello'}``          :param context: the context object         :type context: dict         :return: ``True`` if message (with type 'message') is available or ``False`` if not
198	Returns a set of dag runs for the given search criteria.          :param dag_id: the dag_id to find dag runs for         :type dag_id: int, list         :param run_id: defines the the run id for this dag run         :type run_id: str         :param execution_date: the execution date         :type execution_date: datetime.datetime         :param state: the state of the dag run         :type state: airflow.utils.state.State         :param external_trigger: whether this dag run is externally triggered         :type external_trigger: bool         :param no_backfills: return no backfills (True), return all (False).             Defaults to False         :type no_backfills: bool         :param session: database session         :type session: sqlalchemy.orm.session.Session
199	Returns the task instances for this dag run
200	Returns the task instance specified by task_id for this dag run          :param task_id: the task id
201	The previous DagRun, if there is one
202	The previous, SCHEDULED DagRun, if there is one
203	Determines the overall state of the DagRun based on the state         of its TaskInstances.          :return: State
204	Verifies the DagRun by checking for removed tasks or tasks that are not in the         database yet. It will set state to removed or add the task if required.
205	We need to get the headers in addition to the body answer     to get the location from them     This function uses jenkins_request method from python-jenkins library     with just the return call changed      :param jenkins_server: The server to query     :param req: The request to execute     :return: Dict containing the response body (key body)         and the headers coming along (headers)
206	Given a context, this function provides a dictionary of values that can be used to     externally reconstruct relations between dags, dag_runs, tasks and task_instances.     Default to abc.def.ghi format and can be made to ABC_DEF_GHI format if     in_env_var_format is set to True.      :param context: The context for the task_instance of interest.     :type context: dict     :param in_env_var_format: If returned vars should be in ABC_DEF_GHI format.     :type in_env_var_format: bool     :return: task_instance context as dict.
207	This function decides whether or not to Trigger the remote DAG
208	Sends a single datapoint metric to DataDog          :param metric_name: The name of the metric         :type metric_name: str         :param datapoint: A single integer or float related to the metric         :type datapoint: int or float         :param tags: A list of tags associated with the metric         :type tags: list         :param type_: Type of your metric: gauge, rate, or count         :type type_: str         :param interval: If the type of the metric is rate or count, define the corresponding interval         :type interval: int
209	Queries datadog for a specific metric, potentially with some         function applied to it and returns the results.          :param query: The datadog query to execute (see datadog docs)         :type query: str         :param from_seconds_ago: How many seconds ago to start querying for.         :type from_seconds_ago: int         :param to_seconds_ago: Up to how many seconds ago to query for.         :type to_seconds_ago: int
210	Gets the DAG out of the dictionary, and refreshes it if expired
211	Fail given zombie tasks, which are tasks that haven't         had a heartbeat for too long, in the current DagBag.          :param zombies: zombie task instances to kill.         :type zombies: airflow.utils.dag_processing.SimpleTaskInstance         :param session: DB session.         :type session: sqlalchemy.orm.session.Session
212	Adds the DAG into the bag, recurses into sub dags.         Throws AirflowDagCycleException if a cycle is detected in this dag or its subdags
213	Given a file path or a folder, this method looks for python modules,         imports them and adds them to the dagbag collection.          Note that if a ``.airflowignore`` file is found while processing         the directory, it will behave much like a ``.gitignore``,         ignoring files that match any of the regex patterns specified         in the file.          **Note**: The patterns in .airflowignore are treated as         un-anchored regexes, not shell-like glob patterns.
214	Prints a report around DagBag loading stats
215	Add or subtract days from a YYYY-MM-DD      :param ds: anchor date in ``YYYY-MM-DD`` format to add to     :type ds: str     :param days: number of days to add to the ds, you can use negative values     :type days: int      >>> ds_add('2015-01-01', 5)     '2015-01-06'     >>> ds_add('2015-01-06', -5)     '2015-01-01'
216	Takes an input string and outputs another string     as specified in the output format      :param ds: input string which contains a date     :type ds: str     :param input_format: input string format. E.g. %Y-%m-%d     :type input_format: str     :param output_format: output string format  E.g. %Y-%m-%d     :type output_format: str      >>> ds_format('2015-01-01', "%Y-%m-%d", "%m-%d-%y")     '01-01-15'     >>> ds_format('1/5/2015', "%m/%d/%Y",  "%Y-%m-%d")     '2015-01-05'
217	poke matching files in a directory with self.regex          :return: Bool depending on the search criteria
218	poke for a non empty directory          :return: Bool depending on the search criteria
219	Clears a set of task instances, but makes sure the running ones     get killed.      :param tis: a list of task instances     :param session: current session     :param activate_dag_runs: flag to check for active dag run     :param dag: DAG object
220	Return the try number that this task number will be when it is actually         run.          If the TI is currently running, this will match the column in the         databse, in all othercases this will be incremenetd
221	Generates the shell command required to execute this task instance.          :param dag_id: DAG ID         :type dag_id: unicode         :param task_id: Task ID         :type task_id: unicode         :param execution_date: Execution date for the task         :type execution_date: datetime         :param mark_success: Whether to mark the task as successful         :type mark_success: bool         :param ignore_all_deps: Ignore all ignorable dependencies.             Overrides the other ignore_* parameters.         :type ignore_all_deps: bool         :param ignore_depends_on_past: Ignore depends_on_past parameter of DAGs             (e.g. for Backfills)         :type ignore_depends_on_past: bool         :param ignore_task_deps: Ignore task-specific dependencies such as depends_on_past             and trigger rule         :type ignore_task_deps: bool         :param ignore_ti_state: Ignore the task instance's previous failure/success         :type ignore_ti_state: bool         :param local: Whether to run the task locally         :type local: bool         :param pickle_id: If the DAG was serialized to the DB, the ID             associated with the pickled DAG         :type pickle_id: unicode         :param file_path: path to the file containing the DAG definition         :param raw: raw mode (needs more details)         :param job_id: job ID (needs more details)         :param pool: the Airflow pool that the task should run in         :type pool: unicode         :param cfg_path: the Path to the configuration file         :type cfg_path: basestring         :return: shell command that can be used to run the task instance
222	Get the very latest state from the database, if a session is passed,         we use and looking up the state becomes part of the session, otherwise         a new session is used.
223	Forces the task instance's state to FAILED in the database.
224	Refreshes the task instance from the database based on the primary key          :param lock_for_update: if True, indicates that the database should             lock the TaskInstance (issuing a FOR UPDATE clause) until the             session is committed.
225	Clears all XCom data from the database for the task instance
226	Returns a tuple that identifies the task instance uniquely
227	Checks whether the dependents of this task instance have all succeeded.         This is meant to be used by wait_for_downstream.          This is useful when you do not want to start processing the next         schedule of a task until the dependents are done. For instance,         if the task DROPs and recreates a table.
228	Get datetime of the next retry if the task instance fails. For exponential         backoff, retry_delay is used as base and will be converted to seconds.
229	Checks on whether the task instance is in the right state and timeframe         to be retried.
230	Returns a boolean as to whether the slot pool has room for this         task to run
231	Returns the DagRun for this TaskInstance          :param session:         :return: DagRun
232	Make an XCom available for tasks to pull.          :param key: A key for the XCom         :type key: str         :param value: A value for the XCom. The value is pickled and stored             in the database.         :type value: any pickleable object         :param execution_date: if provided, the XCom will not be visible until             this date. This can be used, for example, to send a message to a             task on a future date without it being immediately visible.         :type execution_date: datetime
233	Pull XComs that optionally meet certain criteria.          The default value for `key` limits the search to XComs         that were returned by other tasks (as opposed to those that were pushed         manually). To remove this filter, pass key=None (or any desired value).          If a single task_id string is provided, the result is the value of the         most recent matching XCom from that task_id. If multiple task_ids are         provided, a tuple of matching values is returned. None is returned         whenever no matches are found.          :param key: A key for the XCom. If provided, only XComs with matching             keys will be returned. The default key is 'return_value', also             available as a constant XCOM_RETURN_KEY. This key is automatically             given to XComs returned by tasks (as opposed to being pushed             manually). To remove the filter, pass key=None.         :type key: str         :param task_ids: Only XComs from tasks with matching ids will be             pulled. Can pass None to remove the filter.         :type task_ids: str or iterable of strings (representing task_ids)         :param dag_id: If provided, only pulls XComs from this DAG.             If None (default), the DAG of the calling task is used.         :type dag_id: str         :param include_prior_dates: If False, only XComs from the current             execution_date are returned. If True, XComs from previous dates             are returned as well.         :type include_prior_dates: bool
234	Sets the log context.
235	Close and upload local log file to remote storage Wasb.
236	Retrieves connection to Google Compute Engine.          :return: Google Compute Engine services object         :rtype: dict
237	Starts an existing instance defined by project_id, zone and resource_id.         Must be called with keyword arguments rather than positional.          :param zone: Google Cloud Platform zone where the instance exists         :type zone: str         :param resource_id: Name of the Compute Engine instance resource         :type resource_id: str         :param project_id: Optional, Google Cloud Platform project ID where the             Compute Engine Instance exists. If set to None or missing,             the default project_id from the GCP connection is used.         :type project_id: str         :return: None
238	Sets machine type of an instance defined by project_id, zone and resource_id.         Must be called with keyword arguments rather than positional.          :param zone: Google Cloud Platform zone where the instance exists.         :type zone: str         :param resource_id: Name of the Compute Engine instance resource         :type resource_id: str         :param body: Body required by the Compute Engine setMachineType API,             as described in             https://cloud.google.com/compute/docs/reference/rest/v1/instances/setMachineType         :type body: dict         :param project_id: Optional, Google Cloud Platform project ID where the             Compute Engine Instance exists. If set to None or missing,             the default project_id from the GCP connection is used.         :type project_id: str         :return: None
239	Retrieves instance template by project_id and resource_id.         Must be called with keyword arguments rather than positional.          :param resource_id: Name of the instance template         :type resource_id: str         :param project_id: Optional, Google Cloud Platform project ID where the             Compute Engine Instance exists. If set to None or missing,             the default project_id from the GCP connection is used.         :type project_id: str         :return: Instance template representation as object according to             https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates         :rtype: dict
240	Inserts instance template using body specified         Must be called with keyword arguments rather than positional.          :param body: Instance template representation as object according to             https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates         :type body: dict         :param request_id: Optional, unique request_id that you might add to achieve             full idempotence (for example when client call times out repeating the request             with the same request id will not create a new instance template again)             It should be in UUID format as defined in RFC 4122         :type request_id: str         :param project_id: Optional, Google Cloud Platform project ID where the             Compute Engine Instance exists. If set to None or missing,             the default project_id from the GCP connection is used.         :type project_id: str         :return: None
241	Retrieves Instance Group Manager by project_id, zone and resource_id.         Must be called with keyword arguments rather than positional.          :param zone: Google Cloud Platform zone where the Instance Group Manager exists         :type zone: str         :param resource_id: Name of the Instance Group Manager         :type resource_id: str         :param project_id: Optional, Google Cloud Platform project ID where the             Compute Engine Instance exists. If set to None or missing,             the default project_id from the GCP connection is used.         :type project_id: str         :return: Instance group manager representation as object according to             https://cloud.google.com/compute/docs/reference/rest/beta/instanceGroupManagers         :rtype: dict
242	Patches Instance Group Manager with the specified body.         Must be called with keyword arguments rather than positional.          :param zone: Google Cloud Platform zone where the Instance Group Manager exists         :type zone: str         :param resource_id: Name of the Instance Group Manager         :type resource_id: str         :param body: Instance Group Manager representation as json-merge-patch object             according to             https://cloud.google.com/compute/docs/reference/rest/beta/instanceTemplates/patch         :type body: dict         :param request_id: Optional, unique request_id that you might add to achieve             full idempotence (for example when client call times out repeating the request             with the same request id will not create a new instance template again).             It should be in UUID format as defined in RFC 4122         :type request_id: str         :param project_id: Optional, Google Cloud Platform project ID where the             Compute Engine Instance exists. If set to None or missing,             the default project_id from the GCP connection is used.         :type project_id: str         :return: None
243	Waits for the named operation to complete - checks status of the async call.          :param operation_name: name of the operation         :type operation_name: str         :param zone: optional region of the request (might be None for global operations)         :type zone: str         :return: None
244	Check if bucket_name exists.          :param bucket_name: the name of the bucket         :type bucket_name: str
245	Creates an Amazon S3 bucket.          :param bucket_name: The name of the bucket         :type bucket_name: str         :param region_name: The name of the aws region in which to create the bucket.         :type region_name: str
246	Checks that a prefix exists in a bucket          :param bucket_name: the name of the bucket         :type bucket_name: str         :param prefix: a key prefix         :type prefix: str         :param delimiter: the delimiter marks key hierarchy.         :type delimiter: str
247	Lists prefixes in a bucket under prefix          :param bucket_name: the name of the bucket         :type bucket_name: str         :param prefix: a key prefix         :type prefix: str         :param delimiter: the delimiter marks key hierarchy.         :type delimiter: str         :param page_size: pagination size         :type page_size: int         :param max_items: maximum items to return         :type max_items: int
248	Lists keys in a bucket under prefix and not containing delimiter          :param bucket_name: the name of the bucket         :type bucket_name: str         :param prefix: a key prefix         :type prefix: str         :param delimiter: the delimiter marks key hierarchy.         :type delimiter: str         :param page_size: pagination size         :type page_size: int         :param max_items: maximum items to return         :type max_items: int
249	Checks if a key exists in a bucket          :param key: S3 key that will point to the file         :type key: str         :param bucket_name: Name of the bucket in which the file is stored         :type bucket_name: str
250	Returns a boto3.s3.Object          :param key: the path to the key         :type key: str         :param bucket_name: the name of the bucket         :type bucket_name: str
251	Reads a key from S3          :param key: S3 key that will point to the file         :type key: str         :param bucket_name: Name of the bucket in which the file is stored         :type bucket_name: str
252	Reads a key with S3 Select.          :param key: S3 key that will point to the file         :type key: str         :param bucket_name: Name of the bucket in which the file is stored         :type bucket_name: str         :param expression: S3 Select expression         :type expression: str         :param expression_type: S3 Select expression type         :type expression_type: str         :param input_serialization: S3 Select input data serialization format         :type input_serialization: dict         :param output_serialization: S3 Select output data serialization format         :type output_serialization: dict         :return: retrieved subset of original data by S3 Select         :rtype: str          .. seealso::             For more details about S3 Select parameters:             http://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.select_object_content
253	Checks that a key matching a wildcard expression exists in a bucket          :param wildcard_key: the path to the key         :type wildcard_key: str         :param bucket_name: the name of the bucket         :type bucket_name: str         :param delimiter: the delimiter marks key hierarchy         :type delimiter: str
254	Returns a boto3.s3.Object object matching the wildcard expression          :param wildcard_key: the path to the key         :type wildcard_key: str         :param bucket_name: the name of the bucket         :type bucket_name: str         :param delimiter: the delimiter marks key hierarchy         :type delimiter: str
255	Loads a local file to S3          :param filename: name of the file to load.         :type filename: str         :param key: S3 key that will point to the file         :type key: str         :param bucket_name: Name of the bucket in which to store the file         :type bucket_name: str         :param replace: A flag to decide whether or not to overwrite the key             if it already exists. If replace is False and the key exists, an             error will be raised.         :type replace: bool         :param encrypt: If True, the file will be encrypted on the server-side             by S3 and will be stored in an encrypted form while at rest in S3.         :type encrypt: bool
256	Loads a string to S3          This is provided as a convenience to drop a string in S3. It uses the         boto infrastructure to ship a file to s3.          :param string_data: str to set as content for the key.         :type string_data: str         :param key: S3 key that will point to the file         :type key: str         :param bucket_name: Name of the bucket in which to store the file         :type bucket_name: str         :param replace: A flag to decide whether or not to overwrite the key             if it already exists         :type replace: bool         :param encrypt: If True, the file will be encrypted on the server-side             by S3 and will be stored in an encrypted form while at rest in S3.         :type encrypt: bool
257	Loads bytes to S3          This is provided as a convenience to drop a string in S3. It uses the         boto infrastructure to ship a file to s3.          :param bytes_data: bytes to set as content for the key.         :type bytes_data: bytes         :param key: S3 key that will point to the file         :type key: str         :param bucket_name: Name of the bucket in which to store the file         :type bucket_name: str         :param replace: A flag to decide whether or not to overwrite the key             if it already exists         :type replace: bool         :param encrypt: If True, the file will be encrypted on the server-side             by S3 and will be stored in an encrypted form while at rest in S3.         :type encrypt: bool
258	Loads a file object to S3          :param file_obj: The file-like object to set as the content for the S3 key.         :type file_obj: file-like object         :param key: S3 key that will point to the file         :type key: str         :param bucket_name: Name of the bucket in which to store the file         :type bucket_name: str         :param replace: A flag that indicates whether to overwrite the key             if it already exists.         :type replace: bool         :param encrypt: If True, S3 encrypts the file on the server,             and the file is stored in encrypted form at rest in S3.         :type encrypt: bool
259	Creates a copy of an object that is already stored in S3.          Note: the S3 connection used here needs to have access to both         source and destination bucket/key.          :param source_bucket_key: The key of the source object.              It can be either full s3:// style url or relative path from root level.              When it's specified as a full s3:// url, please omit source_bucket_name.         :type source_bucket_key: str         :param dest_bucket_key: The key of the object to copy to.              The convention to specify `dest_bucket_key` is the same             as `source_bucket_key`.         :type dest_bucket_key: str         :param source_bucket_name: Name of the S3 bucket where the source object is in.              It should be omitted when `source_bucket_key` is provided as a full s3:// url.         :type source_bucket_name: str         :param dest_bucket_name: Name of the S3 bucket to where the object is copied.              It should be omitted when `dest_bucket_key` is provided as a full s3:// url.         :type dest_bucket_name: str         :param source_version_id: Version ID of the source object (OPTIONAL)         :type source_version_id: str
260	Queries cassandra and returns a cursor to the results.
261	Converts a user type to RECORD that contains n fields, where n is the         number of attributes. Each element in the user type class will be converted to its         corresponding data type in BQ.
262	Send an email with html content using sendgrid.      To use this plugin:     0. include sendgrid subpackage as part of your Airflow installation, e.g.,     pip install 'apache-airflow[sendgrid]'     1. update [email] backend in airflow.cfg, i.e.,     [email]     email_backend = airflow.contrib.utils.sendgrid.send_email     2. configure Sendgrid specific environment variables at all Airflow instances:     SENDGRID_MAIL_FROM={your-mail-from}     SENDGRID_API_KEY={your-sendgrid-api-key}.
263	Retrieves connection to Cloud Speech.          :return: Google Cloud Speech client object.         :rtype: google.cloud.speech_v1.SpeechClient
264	Recognizes audio input          :param config: information to the recognizer that specifies how to process the request.             https://googleapis.github.io/google-cloud-python/latest/speech/gapic/v1/types.html#google.cloud.speech_v1.types.RecognitionConfig         :type config: dict or google.cloud.speech_v1.types.RecognitionConfig         :param audio: audio data to be recognized             https://googleapis.github.io/google-cloud-python/latest/speech/gapic/v1/types.html#google.cloud.speech_v1.types.RecognitionAudio         :type audio: dict or google.cloud.speech_v1.types.RecognitionAudio         :param retry: (Optional) A retry object used to retry requests. If None is specified,             requests will not be retried.         :type retry: google.api_core.retry.Retry         :param timeout: (Optional) The amount of time, in seconds, to wait for the request to complete.             Note that if retry is specified, the timeout applies to each individual attempt.         :type timeout: float
265	Call the SparkSqlHook to run the provided sql query
266	Load AirflowPlugin subclasses from the entrypoints     provided. The entry_point group should be 'airflow.plugins'.      :param entry_points: A collection of entrypoints to search for plugins     :type entry_points: Generator[setuptools.EntryPoint, None, None]     :param airflow_plugins: A collection of existing airflow plugins to         ensure we don't load duplicates     :type airflow_plugins: list[type[airflow.plugins_manager.AirflowPlugin]]     :rtype: list[airflow.plugins_manager.AirflowPlugin]
267	Check whether a potential object is a subclass of     the AirflowPlugin class.      :param plugin_obj: potential subclass of AirflowPlugin     :param existing_plugins: Existing list of AirflowPlugin subclasses     :return: Whether or not the obj is a valid subclass of         AirflowPlugin
268	Sets tasks instances to skipped from the same dag run.          :param dag_run: the DagRun for which to set the tasks to skipped         :param execution_date: execution_date         :param tasks: tasks to skip (not task_ids)         :param session: db session to use
269	Return a AzureDLFileSystem object.
270	Check if a file exists on Azure Data Lake.          :param file_path: Path and name of the file.         :type file_path: str         :return: True if the file exists, False otherwise.         :rtype: bool
271	Upload a file to Azure Data Lake.          :param local_path: local path. Can be single file, directory (in which case,             upload recursively) or glob pattern. Recursive glob patterns using `**`             are not supported.         :type local_path: str         :param remote_path: Remote path to upload to; if multiple files, this is the             directory root to write within.         :type remote_path: str         :param nthreads: Number of threads to use. If None, uses the number of cores.         :type nthreads: int         :param overwrite: Whether to forcibly overwrite existing files/directories.             If False and remote path is a directory, will quit regardless if any files             would be overwritten or not. If True, only matching filenames are actually             overwritten.         :type overwrite: bool         :param buffersize: int [2**22]             Number of bytes for internal buffer. This block cannot be bigger than             a chunk and cannot be smaller than a block.         :type buffersize: int         :param blocksize: int [2**22]             Number of bytes for a block. Within each chunk, we write a smaller             block for each API call. This block cannot be bigger than a chunk.         :type blocksize: int
272	List files in Azure Data Lake Storage          :param path: full path/globstring to use to list files in ADLS         :type path: str
273	Run Presto Query on Athena
274	Uncompress gz and bz2 files
275	Queries MSSQL and returns a cursor of results.          :return: mssql cursor
276	Decorates function to execute function at the same time submitting action_logging     but in CLI context. It will call action logger callbacks twice,     one for pre-execution and the other one for post-execution.      Action logger will be called with below keyword parameters:         sub_command : name of sub-command         start_datetime : start datetime instance by utc         end_datetime : end datetime instance by utc         full_command : full command line arguments         user : current user         log : airflow.models.log.Log ORM instance         dag_id : dag id (optional)         task_id : task_id (optional)         execution_date : execution date (optional)         error : exception instance if there's an exception      :param f: function instance     :return: wrapped function
277	Builds metrics dict from function args     It assumes that function arguments is from airflow.bin.cli module's function     and has Namespace instance where it optionally contains "dag_id", "task_id",     and "execution_date".      :param func_name: name of function     :param namespace: Namespace instance from argparse     :return: dict with metrics
278	Create the specified cgroup.          :param path: The path of the cgroup to create.         E.g. cpu/mygroup/mysubgroup         :return: the Node associated with the created cgroup.         :rtype: cgroupspy.nodes.Node
279	Delete the specified cgroup.          :param path: The path of the cgroup to delete.         E.g. cpu/mygroup/mysubgroup
280	The purpose of this function is to be robust to improper connections         settings provided by users, specifically in the host field.          For example -- when users supply ``https://xx.cloud.databricks.com`` as the         host, we must strip out the protocol to get the host.::              h = DatabricksHook()             assert h._parse_host('https://xx.cloud.databricks.com') == \                 'xx.cloud.databricks.com'          In the case where users supply the correct ``xx.cloud.databricks.com`` as the         host, this function is a no-op.::              assert h._parse_host('xx.cloud.databricks.com') == 'xx.cloud.databricks.com'
281	Utility function to perform an API call with retries          :param endpoint_info: Tuple of method and endpoint         :type endpoint_info: tuple[string, string]         :param json: Parameters for this API call.         :type json: dict         :return: If the api call returns a OK status code,             this function returns the response in JSON. Otherwise,             we throw an AirflowException.         :rtype: dict
282	Sign into Salesforce, only if we are not already signed in.
283	Make a query to Salesforce.          :param query: The query to make to Salesforce.         :type query: str         :return: The query result.         :rtype: dict
284	Get the description of an object from Salesforce.         This description is the object's schema and         some extra metadata that Salesforce stores for each object.          :param obj: The name of the Salesforce object that we are getting a description of.         :type obj: str         :return: the description of the Salesforce object.         :rtype: dict
285	Get a list of all available fields for an object.          :param obj: The name of the Salesforce object that we are getting a description of.         :type obj: str         :return: the names of the fields.         :rtype: list of str
286	Get all instances of the `object` from Salesforce.         For each model, only get the fields specified in fields.          All we really do underneath the hood is run:             SELECT <fields> FROM <obj>;          :param obj: The object name to get from Salesforce.         :type obj: str         :param fields: The fields to get from the object.         :type fields: iterable         :return: all instances of the object from Salesforce.         :rtype: dict
287	Convert a column of a dataframe to UNIX timestamps if applicable          :param column: A Series object representing a column of a dataframe.         :type column: pd.Series         :return: a new series that maintains the same index as the original         :rtype: pd.Series
288	Write query results to file.          Acceptable formats are:             - csv:                 comma-separated-values file. This is the default format.             - json:                 JSON array. Each element in the array is a different row.             - ndjson:                 JSON array but each element is new-line delimited instead of comma delimited like in `json`          This requires a significant amount of cleanup.         Pandas doesn't handle output to CSV and json in a uniform way.         This is especially painful for datetime types.         Pandas wants to write them as strings in CSV, but as millisecond Unix timestamps.          By default, this function will try and leave all values as they are represented in Salesforce.         You use the `coerce_to_timestamp` flag to force all datetimes to become Unix timestamps (UTC).         This is can be greatly beneficial as it will make all of your datetime fields look the same,         and makes it easier to work with in other database environments          :param query_results: the results from a SQL query         :type query_results: list of dict         :param filename: the name of the file where the data should be dumped to         :type filename: str         :param fmt: the format you want the output in. Default:  'csv'         :type fmt: str         :param coerce_to_timestamp: True if you want all datetime fields to be converted into Unix timestamps.             False if you want them to be left in the same format as they were in Salesforce.             Leaving the value as False will result in datetimes being strings. Default: False         :type coerce_to_timestamp: bool         :param record_time_added: True if you want to add a Unix timestamp field             to the resulting data that marks when the data was fetched from Salesforce. Default: False         :type record_time_added: bool         :return: the dataframe that gets written to the file.         :rtype: pd.Dataframe
289	Fetches PyMongo Client
290	Fetches a mongo collection object for querying.          Uses connection schema as DB unless specified.
291	Replaces many documents in a mongo collection.          Uses bulk_write with multiple ReplaceOne operations         https://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.bulk_write          .. note::             If no ``filter_docs``are given, it is assumed that all             replacement documents contain the ``_id`` field which are then             used as filters.          :param mongo_collection: The name of the collection to update.         :type mongo_collection: str         :param docs: The new documents.         :type docs: list[dict]         :param filter_docs: A list of queries that match the documents to replace.             Can be omitted; then the _id fields from docs will be used.         :type filter_docs: list[dict]         :param mongo_db: The name of the database to use.             Can be omitted; then the database from the connection string is used.         :type mongo_db: str         :param upsert: If ``True``, perform an insert if no documents             match the filters for the replace operation.         :type upsert: bool         :param collation: An instance of             :class:`~pymongo.collation.Collation`. This option is only             supported on MongoDB 3.4 and above.         :type collation: pymongo.collation.Collation
292	Checks the mail folder for mails containing attachments with the given name.          :param name: The name of the attachment that will be searched for.         :type name: str         :param mail_folder: The mail folder where to look at.         :type mail_folder: str         :param check_regex: Checks the name for a regular expression.         :type check_regex: bool         :returns: True if there is an attachment with the given name and False if not.         :rtype: bool
293	Retrieves mail's attachments in the mail folder by its name.          :param name: The name of the attachment that will be downloaded.         :type name: str         :param mail_folder: The mail folder where to look at.         :type mail_folder: str         :param check_regex: Checks the name for a regular expression.         :type check_regex: bool         :param latest_only: If set to True it will only retrieve                             the first matched attachment.         :type latest_only: bool         :param not_found_mode: Specify what should happen if no attachment has been found.                                Supported values are 'raise', 'warn' and 'ignore'.                                If it is set to 'raise' it will raise an exception,                                if set to 'warn' it will only print a warning and                                if set to 'ignore' it won't notify you at all.         :type not_found_mode: str         :returns: a list of tuple each containing the attachment filename and its payload.         :rtype: a list of tuple
294	Downloads mail's attachments in the mail folder by its name to the local directory.          :param name: The name of the attachment that will be downloaded.         :type name: str         :param local_output_directory: The output directory on the local machine                                        where the files will be downloaded to.         :type local_output_directory: str         :param mail_folder: The mail folder where to look at.         :type mail_folder: str         :param check_regex: Checks the name for a regular expression.         :type check_regex: bool         :param latest_only: If set to True it will only download                             the first matched attachment.         :type latest_only: bool         :param not_found_mode: Specify what should happen if no attachment has been found.                                Supported values are 'raise', 'warn' and 'ignore'.                                If it is set to 'raise' it will raise an exception,                                if set to 'warn' it will only print a warning and                                if set to 'ignore' it won't notify you at all.         :type not_found_mode: str
295	Gets all attachments by name for the mail.          :param name: The name of the attachment to look for.         :type name: str         :param check_regex: Checks the name for a regular expression.         :type check_regex: bool         :param find_first: If set to True it will only find the first match and then quit.         :type find_first: bool         :returns: a list of tuples each containing name and payload                   where the attachments name matches the given name.         :rtype: list of tuple
296	Gets the file including name and payload.          :returns: the part's name and payload.         :rtype: tuple
297	Write batch records to Kinesis Firehose
298	Determines whether a task is ready to be rescheduled. Only tasks in         NONE state with at least one row in task_reschedule table are         handled by this dependency class, otherwise this dependency is         considered as passed. This dependency fails if the latest reschedule         request's reschedule date is still in future.
299	Send email using backend specified in EMAIL_BACKEND.
300	Send an email with html content      >>> send_email('test@example.com', 'foo', '<b>Foo</b> bar', ['/dev/null'], dryrun=True)
301	Processes DateTimes from the DB making sure it is always         returning UTC. Not using timezone.convert_to_utc as that         converts to configured TIMEZONE while the DB might be         running with some other setting. We assume UTC datetimes         in the database.
302	Check if a blob exists on Azure Blob Storage.          :param container_name: Name of the container.         :type container_name: str         :param blob_name: Name of the blob.         :type blob_name: str         :param kwargs: Optional keyword arguments that             `BlockBlobService.exists()` takes.         :type kwargs: object         :return: True if the blob exists, False otherwise.         :rtype: bool
303	Check if a prefix exists on Azure Blob storage.          :param container_name: Name of the container.         :type container_name: str         :param prefix: Prefix of the blob.         :type prefix: str         :param kwargs: Optional keyword arguments that             `BlockBlobService.list_blobs()` takes.         :type kwargs: object         :return: True if blobs matching the prefix exist, False otherwise.         :rtype: bool
304	Upload a string to Azure Blob Storage.          :param string_data: String to load.         :type string_data: str         :param container_name: Name of the container.         :type container_name: str         :param blob_name: Name of the blob.         :type blob_name: str         :param kwargs: Optional keyword arguments that             `BlockBlobService.create_blob_from_text()` takes.         :type kwargs: object
305	Read a file from Azure Blob Storage and return as a string.          :param container_name: Name of the container.         :type container_name: str         :param blob_name: Name of the blob.         :type blob_name: str         :param kwargs: Optional keyword arguments that             `BlockBlobService.create_blob_from_path()` takes.         :type kwargs: object
306	Delete a file from Azure Blob Storage.          :param container_name: Name of the container.         :type container_name: str         :param blob_name: Name of the blob.         :type blob_name: str         :param is_prefix: If blob_name is a prefix, delete all matching files         :type is_prefix: bool         :param ignore_if_missing: if True, then return success even if the             blob does not exist.         :type ignore_if_missing: bool         :param kwargs: Optional keyword arguments that             `BlockBlobService.create_blob_from_path()` takes.         :type kwargs: object
307	BACKPORT FROM PYTHON3 FTPLIB.      List a directory in a standardized format by using MLSD     command (RFC-3659). If path is omitted the current directory     is assumed. "facts" is a list of strings representing the type     of information desired (e.g. ["type", "size", "perm"]).      Return a generator object yielding a tuple of two elements     for every file found in path.     First element is the file name, the second one is a dictionary     including a variable number of "facts" depending on the server     and whether "facts" argument has been provided.
308	Returns a FTP connection object
309	Returns a list of files on the remote system.          :param path: full path to the remote directory to list         :type path: str
310	Transfers the remote file to a local location.          If local_full_path_or_buffer is a string path, the file will be put         at that location; if it is a file-like buffer, the file will         be written to the buffer but not closed.          :param remote_full_path: full path to the remote file         :type remote_full_path: str         :param local_full_path_or_buffer: full path to the local file or a             file-like buffer         :type local_full_path_or_buffer: str or file-like buffer         :param callback: callback which is called each time a block of data             is read. if you do not use a callback, these blocks will be written             to the file or buffer passed in. if you do pass in a callback, note             that writing to a file or buffer will need to be handled inside the             callback.             [default: output_handle.write()]         :type callback: callable          :Example::              hook = FTPHook(ftp_conn_id='my_conn')              remote_path = '/path/to/remote/file'             local_path = '/path/to/local/file'              # with a custom callback (in this case displaying progress on each read)             def print_progress(percent_progress):                 self.log.info('Percent Downloaded: %s%%' % percent_progress)              total_downloaded = 0             total_file_size = hook.get_size(remote_path)             output_handle = open(local_path, 'wb')             def write_to_file_with_progress(data):                 total_downloaded += len(data)                 output_handle.write(data)                 percent_progress = (total_downloaded / total_file_size) * 100                 print_progress(percent_progress)             hook.retrieve_file(remote_path, None, callback=write_to_file_with_progress)              # without a custom callback data is written to the local_path             hook.retrieve_file(remote_path, local_path)
311	Transfers a local file to the remote location.          If local_full_path_or_buffer is a string path, the file will be read         from that location; if it is a file-like buffer, the file will         be read from the buffer but not closed.          :param remote_full_path: full path to the remote file         :type remote_full_path: str         :param local_full_path_or_buffer: full path to the local file or a             file-like buffer         :type local_full_path_or_buffer: str or file-like buffer
312	Returns a datetime object representing the last time the file was modified          :param path: remote file path         :type path: string
313	Call the DiscordWebhookHook to post message
314	Return the FileService object.
315	Check if a directory exists on Azure File Share.          :param share_name: Name of the share.         :type share_name: str         :param directory_name: Name of the directory.         :type directory_name: str         :param kwargs: Optional keyword arguments that             `FileService.exists()` takes.         :type kwargs: object         :return: True if the file exists, False otherwise.         :rtype: bool
316	Check if a file exists on Azure File Share.          :param share_name: Name of the share.         :type share_name: str         :param directory_name: Name of the directory.         :type directory_name: str         :param file_name: Name of the file.         :type file_name: str         :param kwargs: Optional keyword arguments that             `FileService.exists()` takes.         :type kwargs: object         :return: True if the file exists, False otherwise.         :rtype: bool
317	Return the list of directories and files stored on a Azure File Share.          :param share_name: Name of the share.         :type share_name: str         :param directory_name: Name of the directory.         :type directory_name: str         :param kwargs: Optional keyword arguments that             `FileService.list_directories_and_files()` takes.         :type kwargs: object         :return: A list of files and directories         :rtype: list
318	Create a new directory on a Azure File Share.          :param share_name: Name of the share.         :type share_name: str         :param directory_name: Name of the directory.         :type directory_name: str         :param kwargs: Optional keyword arguments that             `FileService.create_directory()` takes.         :type kwargs: object         :return: A list of files and directories         :rtype: list
319	Upload a file to Azure File Share.          :param file_path: Path to the file to load.         :type file_path: str         :param share_name: Name of the share.         :type share_name: str         :param directory_name: Name of the directory.         :type directory_name: str         :param file_name: Name of the file.         :type file_name: str         :param kwargs: Optional keyword arguments that             `FileService.create_file_from_path()` takes.         :type kwargs: object
320	Upload a string to Azure File Share.          :param string_data: String to load.         :type string_data: str         :param share_name: Name of the share.         :type share_name: str         :param directory_name: Name of the directory.         :type directory_name: str         :param file_name: Name of the file.         :type file_name: str         :param kwargs: Optional keyword arguments that             `FileService.create_file_from_text()` takes.         :type kwargs: object
321	Upload a stream to Azure File Share.          :param stream: Opened file/stream to upload as the file content.         :type stream: file-like         :param share_name: Name of the share.         :type share_name: str         :param directory_name: Name of the directory.         :type directory_name: str         :param file_name: Name of the file.         :type file_name: str         :param count: Size of the stream in bytes         :type count: int         :param kwargs: Optional keyword arguments that             `FileService.create_file_from_stream()` takes.         :type kwargs: object
322	Returns a Google Cloud Storage service object.
323	Copies an object from a bucket to another, with renaming if requested.          destination_bucket or destination_object can be omitted, in which case         source bucket/object is used, but not both.          :param source_bucket: The bucket of the object to copy from.         :type source_bucket: str         :param source_object: The object to copy.         :type source_object: str         :param destination_bucket: The destination of the object to copied to.             Can be omitted; then the same bucket is used.         :type destination_bucket: str         :param destination_object: The (renamed) path of the object if given.             Can be omitted; then the same name is used.         :type destination_object: str
324	Get a file from Google Cloud Storage.          :param bucket_name: The bucket to fetch from.         :type bucket_name: str         :param object_name: The object to fetch.         :type object_name: str         :param filename: If set, a local file path where the file should be written to.         :type filename: str
325	Uploads a local file to Google Cloud Storage.          :param bucket_name: The bucket to upload to.         :type bucket_name: str         :param object_name: The object name to set when uploading the local file.         :type object_name: str         :param filename: The local file path to the file to be uploaded.         :type filename: str         :param mime_type: The MIME type to set when uploading the file.         :type mime_type: str         :param gzip: Option to compress file for upload         :type gzip: bool
326	Checks for the existence of a file in Google Cloud Storage.          :param bucket_name: The Google cloud storage bucket where the object is.         :type bucket_name: str         :param object_name: The name of the blob_name to check in the Google cloud             storage bucket.         :type object_name: str
327	Checks if an blob_name is updated in Google Cloud Storage.          :param bucket_name: The Google cloud storage bucket where the object is.         :type bucket_name: str         :param object_name: The name of the object to check in the Google cloud             storage bucket.         :type object_name: str         :param ts: The timestamp to check against.         :type ts: datetime.datetime
328	Deletes an object from the bucket.          :param bucket_name: name of the bucket, where the object resides         :type bucket_name: str         :param object_name: name of the object to delete         :type object_name: str
329	List all objects from the bucket with the give string prefix in name          :param bucket_name: bucket name         :type bucket_name: str         :param versions: if true, list all versions of the objects         :type versions: bool         :param max_results: max count of items to return in a single page of responses         :type max_results: int         :param prefix: prefix string which filters objects whose name begin with             this prefix         :type prefix: str         :param delimiter: filters objects based on the delimiter (for e.g '.csv')         :type delimiter: str         :return: a stream of object names matching the filtering criteria
330	Gets the size of a file in Google Cloud Storage.          :param bucket_name: The Google cloud storage bucket where the blob_name is.         :type bucket_name: str         :param object_name: The name of the object to check in the Google             cloud storage bucket_name.         :type object_name: str
331	Gets the CRC32c checksum of an object in Google Cloud Storage.          :param bucket_name: The Google cloud storage bucket where the blob_name is.         :type bucket_name: str         :param object_name: The name of the object to check in the Google cloud             storage bucket_name.         :type object_name: str
332	Gets the MD5 hash of an object in Google Cloud Storage.          :param bucket_name: The Google cloud storage bucket where the blob_name is.         :type bucket_name: str         :param object_name: The name of the object to check in the Google cloud             storage bucket_name.         :type object_name: str
333	Creates a new bucket. Google Cloud Storage uses a flat namespace, so         you can't create a bucket with a name that is already in use.          .. seealso::             For more information, see Bucket Naming Guidelines:             https://cloud.google.com/storage/docs/bucketnaming.html#requirements          :param bucket_name: The name of the bucket.         :type bucket_name: str         :param resource: An optional dict with parameters for creating the bucket.             For information on available parameters, see Cloud Storage API doc:             https://cloud.google.com/storage/docs/json_api/v1/buckets/insert         :type resource: dict         :param storage_class: This defines how objects in the bucket are stored             and determines the SLA and the cost of storage. Values include              - ``MULTI_REGIONAL``             - ``REGIONAL``             - ``STANDARD``             - ``NEARLINE``             - ``COLDLINE``.              If this value is not specified when the bucket is             created, it will default to STANDARD.         :type storage_class: str         :param location: The location of the bucket.             Object data for objects in the bucket resides in physical storage             within this region. Defaults to US.              .. seealso::                 https://developers.google.com/storage/docs/bucket-locations          :type location: str         :param project_id: The ID of the GCP Project.         :type project_id: str         :param labels: User-provided labels, in key/value pairs.         :type labels: dict         :return: If successful, it returns the ``id`` of the bucket.
334	Composes a list of existing object into a new object in the same storage bucket_name          Currently it only supports up to 32 objects that can be concatenated         in a single operation          https://cloud.google.com/storage/docs/json_api/v1/objects/compose          :param bucket_name: The name of the bucket containing the source objects.             This is also the same bucket to store the composed destination object.         :type bucket_name: str         :param source_objects: The list of source objects that will be composed             into a single object.         :type source_objects: list         :param destination_object: The path of the object if given.         :type destination_object: str
335	Returns true if training job's secondary status message has changed.      :param current_job_description: Current job description, returned from DescribeTrainingJob call.     :type current_job_description: dict     :param prev_job_description: Previous job description, returned from DescribeTrainingJob call.     :type prev_job_description: dict      :return: Whether the secondary status message of a training job changed or not.
336	Returns a string contains start time and the secondary training job status message.      :param job_description: Returned response from DescribeTrainingJob call     :type job_description: dict     :param prev_description: Previous job description from DescribeTrainingJob call     :type prev_description: dict      :return: Job status string to be printed.
337	Tar the local file or directory and upload to s3          :param path: local file or directory         :type path: str         :param key: s3 key         :type key: str         :param bucket: s3 bucket         :type bucket: str         :return: None
338	Extract the S3 operations from the configuration and execute them.          :param config: config of SageMaker operation         :type config: dict         :rtype: dict
339	Check if an S3 URL exists          :param s3url: S3 url         :type s3url: str         :rtype: bool
340	Establish an AWS connection for retrieving logs during training          :rtype: CloudWatchLogs.Client
341	Create a training job          :param config: the config for training         :type config: dict         :param wait_for_completion: if the program should keep running until job finishes         :type wait_for_completion: bool         :param check_interval: the time interval in seconds which the operator             will check the status of any SageMaker job         :type check_interval: int         :param max_ingestion_time: the maximum ingestion time in seconds. Any             SageMaker jobs that run longer than this will fail. Setting this to             None implies no timeout for any SageMaker job.         :type max_ingestion_time: int         :return: A response to training job creation
342	Create a tuning job          :param config: the config for tuning         :type config: dict         :param wait_for_completion: if the program should keep running until job finishes         :type wait_for_completion: bool         :param check_interval: the time interval in seconds which the operator             will check the status of any SageMaker job         :type check_interval: int         :param max_ingestion_time: the maximum ingestion time in seconds. Any             SageMaker jobs that run longer than this will fail. Setting this to             None implies no timeout for any SageMaker job.         :type max_ingestion_time: int         :return: A response to tuning job creation
343	Create a transform job          :param config: the config for transform job         :type config: dict         :param wait_for_completion: if the program should keep running until job finishes         :type wait_for_completion: bool         :param check_interval: the time interval in seconds which the operator             will check the status of any SageMaker job         :type check_interval: int         :param max_ingestion_time: the maximum ingestion time in seconds. Any             SageMaker jobs that run longer than this will fail. Setting this to             None implies no timeout for any SageMaker job.         :type max_ingestion_time: int         :return: A response to transform job creation
344	Create an endpoint          :param config: the config for endpoint         :type config: dict         :param wait_for_completion: if the program should keep running until job finishes         :type wait_for_completion: bool         :param check_interval: the time interval in seconds which the operator             will check the status of any SageMaker job         :type check_interval: int         :param max_ingestion_time: the maximum ingestion time in seconds. Any             SageMaker jobs that run longer than this will fail. Setting this to             None implies no timeout for any SageMaker job.         :type max_ingestion_time: int         :return: A response to endpoint creation
345	Return the training job info associated with job_name and print CloudWatch logs
346	Check status of a SageMaker job          :param job_name: name of the job to check status         :type job_name: str         :param key: the key of the response dict             that points to the state         :type key: str         :param describe_function: the function used to retrieve the status         :type describe_function: python callable         :param args: the arguments for the function         :param check_interval: the time interval in seconds which the operator             will check the status of any SageMaker job         :type check_interval: int         :param max_ingestion_time: the maximum ingestion time in seconds. Any             SageMaker jobs that run longer than this will fail. Setting this to             None implies no timeout for any SageMaker job.         :type max_ingestion_time: int         :param non_terminal_states: the set of nonterminal states         :type non_terminal_states: set         :return: response of describe call after job is done
347	Display the logs for a given training job, optionally tailing them until the         job is complete.          :param job_name: name of the training job to check status and display logs for         :type job_name: str         :param non_terminal_states: the set of non_terminal states         :type non_terminal_states: set         :param failed_states: the set of failed states         :type failed_states: set         :param wait_for_completion: Whether to keep looking for new log entries             until the job completes         :type wait_for_completion: bool         :param check_interval: The interval in seconds between polling for new log entries and job completion         :type check_interval: int         :param max_ingestion_time: the maximum ingestion time in seconds. Any             SageMaker jobs that run longer than this will fail. Setting this to             None implies no timeout for any SageMaker job.         :type max_ingestion_time: int         :return: None
348	Execute the python dataflow job.
349	Run migrations in 'offline' mode.      This configures the context with just a URL     and not an Engine, though an Engine is acceptable     here as well.  By skipping the Engine creation     we don't even need a DBAPI to be available.      Calls to context.execute() here emit the given string to the     script output.
350	Run migrations in 'online' mode.      In this scenario we need to create an Engine     and associate a connection with the context.
351	Deletes the specified Cloud Bigtable instance.         Raises google.api_core.exceptions.NotFound if the Cloud Bigtable instance does         not exist.          :param project_id: Optional, Google Cloud Platform project ID where the             BigTable exists. If set to None or missing,             the default project_id from the GCP connection is used.         :type project_id: str         :param instance_id: The ID of the Cloud Bigtable instance.         :type instance_id: str
352	Creates new instance.          :type instance_id: str         :param instance_id: The ID for the new instance.         :type main_cluster_id: str         :param main_cluster_id: The ID for main cluster for the new instance.         :type main_cluster_zone: str         :param main_cluster_zone: The zone for main cluster.             See https://cloud.google.com/bigtable/docs/locations for more details.         :type project_id: str         :param project_id: Optional, Google Cloud Platform project ID where the             BigTable exists. If set to None or missing,             the default project_id from the GCP connection is used.         :type replica_cluster_id: str         :param replica_cluster_id: (optional) The ID for replica cluster for the new             instance.         :type replica_cluster_zone: str         :param replica_cluster_zone: (optional)  The zone for replica cluster.         :type instance_type: enums.Instance.Type         :param instance_type: (optional) The type of the instance.         :type instance_display_name: str         :param instance_display_name: (optional) Human-readable name of the instance.                 Defaults to ``instance_id``.         :type instance_labels: dict         :param instance_labels: (optional) Dictionary of labels to associate with the             instance.         :type cluster_nodes: int         :param cluster_nodes: (optional) Number of nodes for cluster.         :type cluster_storage_type: enums.StorageType         :param cluster_storage_type: (optional) The type of storage.         :type timeout: int         :param timeout: (optional) timeout (in seconds) for instance creation.                         If None is not specified, Operator will wait indefinitely.
353	Creates the specified Cloud Bigtable table.         Raises ``google.api_core.exceptions.AlreadyExists`` if the table exists.          :type instance: Instance         :param instance: The Cloud Bigtable instance that owns the table.         :type table_id: str         :param table_id: The ID of the table to create in Cloud Bigtable.         :type initial_split_keys: list         :param initial_split_keys: (Optional) A list of row keys in bytes to use to             initially split the table.         :type column_families: dict         :param column_families: (Optional) A map of columns to create. The key is the             column_id str, and the value is a             :class:`google.cloud.bigtable.column_family.GarbageCollectionRule`.
354	Deletes the specified table in Cloud Bigtable.         Raises google.api_core.exceptions.NotFound if the table does not exist.          :type instance_id: str         :param instance_id: The ID of the Cloud Bigtable instance.         :type table_id: str         :param table_id: The ID of the table in Cloud Bigtable.         :type project_id: str         :param project_id: Optional, Google Cloud Platform project ID where the             BigTable exists. If set to None or missing,             the default project_id from the GCP connection is used.
355	Updates number of nodes in the specified Cloud Bigtable cluster.         Raises google.api_core.exceptions.NotFound if the cluster does not exist.          :type instance: Instance         :param instance: The Cloud Bigtable instance that owns the cluster.         :type cluster_id: str         :param cluster_id: The ID of the cluster.         :type nodes: int         :param nodes: The desired number of nodes.
356	This function creates the command list from available information
357	This function prepares a list of hiveconf params         from a dictionary of key value pairs.          :param d:         :type d: dict          >>> hh = HiveCliHook()         >>> hive_conf = {"hive.exec.dynamic.partition": "true",         ... "hive.exec.dynamic.partition.mode": "nonstrict"}         >>> hh._prepare_hiveconf(hive_conf)         ["-hiveconf", "hive.exec.dynamic.partition=true",\  "-hiveconf", "hive.exec.dynamic.partition.mode=nonstrict"]
358	Loads a pandas DataFrame into hive.          Hive data types will be inferred if not passed but column names will         not be sanitized.          :param df: DataFrame to load into a Hive table         :type df: pandas.DataFrame         :param table: target Hive table, use dot notation to target a             specific database         :type table: str         :param field_dict: mapping from column name to hive data type.             Note that it must be OrderedDict so as to keep columns' order.         :type field_dict: collections.OrderedDict         :param delimiter: field delimiter in the file         :type delimiter: str         :param encoding: str encoding to use when writing DataFrame to file         :type encoding: str         :param pandas_kwargs: passed to DataFrame.to_csv         :type pandas_kwargs: dict         :param kwargs: passed to self.load_file
359	Loads a local file into Hive          Note that the table generated in Hive uses ``STORED AS textfile``         which isn't the most efficient serialization format. If a         large amount of data is loaded and/or if the tables gets         queried considerably, you may want to use this operator only to         stage the data into a temporary table before loading it into its         final destination using a ``HiveOperator``.          :param filepath: local filepath of the file to load         :type filepath: str         :param table: target Hive table, use dot notation to target a             specific database         :type table: str         :param delimiter: field delimiter in the file         :type delimiter: str         :param field_dict: A dictionary of the fields name in the file             as keys and their Hive types as values.             Note that it must be OrderedDict so as to keep columns' order.         :type field_dict: collections.OrderedDict         :param create: whether to create the table if it doesn't exist         :type create: bool         :param overwrite: whether to overwrite the data in table or partition         :type overwrite: bool         :param partition: target partition as a dict of partition columns             and values         :type partition: dict         :param recreate: whether to drop and recreate the table at every             execution         :type recreate: bool         :param tblproperties: TBLPROPERTIES of the hive table being created         :type tblproperties: dict
360	Returns a Hive thrift client.
361	Checks whether a partition with a given name exists          :param schema: Name of hive schema (database) @table belongs to         :type schema: str         :param table: Name of hive table @partition belongs to         :type schema: str         :partition: Name of the partitions to check for (eg `a=b/c=d`)         :type schema: str         :rtype: bool          >>> hh = HiveMetastoreHook()         >>> t = 'static_babynames_partitioned'         >>> hh.check_for_named_partition('airflow', t, "ds=2015-01-01")         True         >>> hh.check_for_named_partition('airflow', t, "ds=xxx")         False
362	Check if table exists          >>> hh = HiveMetastoreHook()         >>> hh.table_exists(db='airflow', table_name='static_babynames')         True         >>> hh.table_exists(db='airflow', table_name='does_not_exist')         False
363	Returns a Hive connection object.
364	Get results of the provided hql in target schema.          :param hql: hql to be executed.         :type hql: str or list         :param schema: target schema, default to 'default'.         :type schema: str         :param fetch_size: max size of result to fetch.         :type fetch_size: int         :param hive_conf: hive_conf to execute alone with the hql.         :type hive_conf: dict         :return: results of hql execution, dict with data (list of results) and header         :rtype: dict
365	Execute hql in target schema and write results to a csv file.          :param hql: hql to be executed.         :type hql: str or list         :param csv_filepath: filepath of csv to write results into.         :type csv_filepath: str         :param schema: target schema, default to 'default'.         :type schema: str         :param delimiter: delimiter of the csv file, default to ','.         :type delimiter: str         :param lineterminator: lineterminator of the csv file.         :type lineterminator: str         :param output_header: header of the csv file, default to True.         :type output_header: bool         :param fetch_size: number of result rows to write into the csv file, default to 1000.         :type fetch_size: int         :param hive_conf: hive_conf to execute alone with the hql.         :type hive_conf: dict
366	Get a set of records from a Hive query.          :param hql: hql to be executed.         :type hql: str or list         :param schema: target schema, default to 'default'.         :type schema: str         :param hive_conf: hive_conf to execute alone with the hql.         :type hive_conf: dict         :return: result of hive execution         :rtype: list          >>> hh = HiveServer2Hook()         >>> sql = "SELECT * FROM airflow.static_babynames LIMIT 100"         >>> len(hh.get_records(sql))         100
367	Get a pandas dataframe from a Hive query          :param hql: hql to be executed.         :type hql: str or list         :param schema: target schema, default to 'default'.         :type schema: str         :return: result of hql execution         :rtype: DataFrame          >>> hh = HiveServer2Hook()         >>> sql = "SELECT * FROM airflow.static_babynames LIMIT 100"         >>> df = hh.get_pandas_df(sql)         >>> len(df.index)         100          :return: pandas.DateFrame
368	Retrieves connection to Cloud Vision.          :return: Google Cloud Vision client object.         :rtype: google.cloud.vision_v1.ProductSearchClient
369	Get Dingding endpoint for sending message.
370	Send Dingding message
371	Helper method that binds parameters to a SQL query.
372	Helper method that escapes parameters to a SQL query.
373	Helper method that casts a BigQuery row to the appropriate data types.     This is useful because BigQuery returns all fields as strings.
374	function to check expected type and raise     error if type is not correct
375	Returns a BigQuery PEP 249 connection object.
376	Returns a BigQuery service object.
377	Checks for the existence of a table in Google BigQuery.          :param project_id: The Google cloud project in which to look for the             table. The connection supplied to the hook must provide access to             the specified project.         :type project_id: str         :param dataset_id: The name of the dataset in which to look for the             table.         :type dataset_id: str         :param table_id: The name of the table to check the existence of.         :type table_id: str
378	Creates a new, empty table in the dataset.         To create a view, which is defined by a SQL query, parse a dictionary to 'view' kwarg          :param project_id: The project to create the table into.         :type project_id: str         :param dataset_id: The dataset to create the table into.         :type dataset_id: str         :param table_id: The Name of the table to be created.         :type table_id: str         :param schema_fields: If set, the schema field list as defined here:             https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.load.schema         :type schema_fields: list         :param labels: a dictionary containing labels for the table, passed to BigQuery         :type labels: dict          **Example**: ::              schema_fields=[{"name": "emp_name", "type": "STRING", "mode": "REQUIRED"},                            {"name": "salary", "type": "INTEGER", "mode": "NULLABLE"}]          :param time_partitioning: configure optional time partitioning fields i.e.             partition by field, type and expiration as per API specifications.              .. seealso::                 https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#timePartitioning         :type time_partitioning: dict         :param cluster_fields: [Optional] The fields used for clustering.             Must be specified with time_partitioning, data in the table will be first             partitioned and subsequently clustered.             https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#clustering.fields         :type cluster_fields: list         :param view: [Optional] A dictionary containing definition for the view.             If set, it will create a view instead of a table:             https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#view         :type view: dict          **Example**: ::              view = {                 "query": "SELECT * FROM `test-project-id.test_dataset_id.test_table_prefix*` LIMIT 1000",                 "useLegacySql": False             }          :return: None
379	Patch information in an existing table.         It only updates fileds that are provided in the request object.          Reference: https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/patch          :param dataset_id: The dataset containing the table to be patched.         :type dataset_id: str         :param table_id: The Name of the table to be patched.         :type table_id: str         :param project_id: The project containing the table to be patched.         :type project_id: str         :param description: [Optional] A user-friendly description of this table.         :type description: str         :param expiration_time: [Optional] The time when this table expires,             in milliseconds since the epoch.         :type expiration_time: int         :param external_data_configuration: [Optional] A dictionary containing             properties of a table stored outside of BigQuery.         :type external_data_configuration: dict         :param friendly_name: [Optional] A descriptive name for this table.         :type friendly_name: str         :param labels: [Optional] A dictionary containing labels associated with this table.         :type labels: dict         :param schema: [Optional] If set, the schema field list as defined here:             https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs#configuration.load.schema             The supported schema modifications and unsupported schema modification are listed here:             https://cloud.google.com/bigquery/docs/managing-table-schemas             **Example**: ::                  schema=[{"name": "emp_name", "type": "STRING", "mode": "REQUIRED"},                                {"name": "salary", "type": "INTEGER", "mode": "NULLABLE"}]          :type schema: list         :param time_partitioning: [Optional] A dictionary containing time-based partitioning              definition for the table.         :type time_partitioning: dict         :param view: [Optional] A dictionary containing definition for the view.             If set, it will patch a view instead of a table:             https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#view             **Example**: ::                  view = {                     "query": "SELECT * FROM `test-project-id.test_dataset_id.test_table_prefix*` LIMIT 500",                     "useLegacySql": False                 }          :type view: dict         :param require_partition_filter: [Optional] If true, queries over the this table require a             partition filter. If false, queries over the table         :type require_partition_filter: bool
380	Cancel all started queries that have not yet completed
381	Delete an existing table from the dataset;         If the table does not exist, return an error unless ignore_if_missing         is set to True.          :param deletion_dataset_table: A dotted             ``(<project>.|<project>:)<dataset>.<table>`` that indicates which table             will be deleted.         :type deletion_dataset_table: str         :param ignore_if_missing: if True, then return success even if the             requested table does not exist.         :type ignore_if_missing: bool         :return:
382	creates a new, empty table in the dataset;         If the table already exists, update the existing table.         Since BigQuery does not natively allow table upserts, this is not an         atomic operation.          :param dataset_id: the dataset to upsert the table into.         :type dataset_id: str         :param table_resource: a table resource. see             https://cloud.google.com/bigquery/docs/reference/v2/tables#resource         :type table_resource: dict         :param project_id: the project to upsert the table into.  If None,             project will be self.project_id.         :return:
383	Grant authorized view access of a dataset to a view table.         If this view has already been granted access to the dataset, do nothing.         This method is not atomic.  Running it may clobber a simultaneous update.          :param source_dataset: the source dataset         :type source_dataset: str         :param view_dataset: the dataset that the view is in         :type view_dataset: str         :param view_table: the table of the view         :type view_table: str         :param source_project: the project of the source dataset. If None,             self.project_id will be used.         :type source_project: str         :param view_project: the project that the view is in. If None,             self.project_id will be used.         :type view_project: str         :return: the datasets resource of the source dataset.
384	Method returns dataset_resource if dataset exist         and raised 404 error if dataset does not exist          :param dataset_id: The BigQuery Dataset ID         :type dataset_id: str         :param project_id: The GCP Project ID         :type project_id: str         :return: dataset_resource              .. seealso::                 For more information, see Dataset Resource content:                 https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets#resource
385	Method returns full list of BigQuery datasets in the current project          .. seealso::             For more information, see:             https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/list          :param project_id: Google Cloud Project for which you             try to get all datasets         :type project_id: str         :return: datasets_list              Example of returned datasets_list: ::                     {                       "kind":"bigquery#dataset",                       "location":"US",                       "id":"your-project:dataset_2_test",                       "datasetReference":{                          "projectId":"your-project",                          "datasetId":"dataset_2_test"                       }                    },                    {                       "kind":"bigquery#dataset",                       "location":"US",                       "id":"your-project:dataset_1_test",                       "datasetReference":{                          "projectId":"your-project",                          "datasetId":"dataset_1_test"                       }                    }                 ]
386	Method to stream data into BigQuery one record at a time without needing         to run a load job          .. seealso::             For more information, see:             https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata/insertAll          :param project_id: The name of the project where we have the table         :type project_id: str         :param dataset_id: The name of the dataset where we have the table         :type dataset_id: str         :param table_id: The name of the table         :type table_id: str         :param rows: the rows to insert         :type rows: list          **Example or rows**:             rows=[{"json": {"a_key": "a_value_0"}}, {"json": {"a_key": "a_value_1"}}]          :param ignore_unknown_values: [Optional] Accept rows that contain values             that do not match the schema. The unknown values are ignored.             The default value  is false, which treats unknown values as errors.         :type ignore_unknown_values: bool         :param skip_invalid_rows: [Optional] Insert all valid rows of a request,             even if invalid rows exist. The default value is false, which causes             the entire request to fail if any invalid rows exist.         :type skip_invalid_rows: bool         :param fail_on_error: [Optional] Force the task to fail if any errors occur.             The default value is false, which indicates the task should not fail             even if any insertion errors occur.         :type fail_on_error: bool
387	Executes a BigQuery query, and returns the job ID.          :param operation: The query to execute.         :type operation: str         :param parameters: Parameters to substitute into the query.         :type parameters: dict
388	Execute a BigQuery query multiple times with different parameters.          :param operation: The query to execute.         :type operation: str         :param seq_of_parameters: List of dictionary parameters to substitute into the             query.         :type seq_of_parameters: list
389	Helper method for fetchone, which returns the next row from a buffer.         If the buffer is empty, attempts to paginate through the result set for         the next page, and load it into the buffer.
390	Queries Postgres and returns a cursor to the results.
391	Create all the intermediate directories in a remote host      :param sftp_client: A Paramiko SFTP client.     :param remote_directory: Absolute Path of the directory containing the file     :return:
392	Create queue using connection object          :param queue_name: name of the queue.         :type queue_name: str         :param attributes: additional attributes for the queue (default: None)             For details of the attributes parameter see :py:meth:`botocore.client.SQS.create_queue`         :type attributes: dict          :return: dict with the information about the queue             For details of the returned value see :py:meth:`botocore.client.SQS.create_queue`         :rtype: dict
393	Send message to the queue          :param queue_url: queue url         :type queue_url: str         :param message_body: the contents of the message         :type message_body: str         :param delay_seconds: seconds to delay the message         :type delay_seconds: int         :param message_attributes: additional attributes for the message (default: None)             For details of the attributes parameter see :py:meth:`botocore.client.SQS.send_message`         :type message_attributes: dict          :return: dict with the information about the message sent             For details of the returned value see :py:meth:`botocore.client.SQS.send_message`         :rtype: dict
394	Run the task command.          :param run_with: list of tokens to run the task command with e.g. ``['bash', '-c']``         :type run_with: list         :param join_args: whether to concatenate the list of command tokens e.g. ``['airflow', 'run']`` vs             ``['airflow run']``         :param join_args: bool         :return: the process that was run         :rtype: subprocess.Popen
395	A callback that should be called when this is done running.
396	Parse options and process commands
397	generate HTML header content
398	generate HTML div
399	generate javascript code for the chart
400	Create X-axis
401	Create Y-axis
402	Returns a sqlite connection object
403	Decorator to log user actions
404	Decorator to make a view compressed
405	Returns the last dag run for a dag, None if there was none.     Last dag run can be any type of run eg. scheduled or backfilled.     Overridden DagRuns are ignored.
406	Creates a dag run from this dag including the tasks associated with this dag.         Returns the dag run.          :param run_id: defines the the run id for this dag run         :type run_id: str         :param execution_date: the execution date of this dag run         :type execution_date: datetime.datetime         :param state: the state of the dag run         :type state: airflow.utils.state.State         :param start_date: the date this dag run should be evaluated         :type start_date: datetime.datetime         :param external_trigger: whether this dag run is externally triggered         :type external_trigger: bool         :param session: database session         :type session: sqlalchemy.orm.session.Session
407	Publish the message to SQS queue          :param context: the context object         :type context: dict         :return: dict with information about the message sent             For details of the returned dict see :py:meth:`botocore.client.SQS.send_message`         :rtype: dict
408	returns a json response from a json serializable python object
409	Opens the given file. If the path contains a folder with a .zip suffix, then     the folder is treated as a zip archive, opening the file inside the archive.      :return: a file object, as in `open`, or as in `ZipFile.open`.
410	Used by cache to get a unique key per URL
411	Returns Gcp Video Intelligence Service client          :rtype: google.cloud.videointelligence_v1.VideoIntelligenceServiceClient
412	Performs video annotation.          :param input_uri: Input video location. Currently, only Google Cloud Storage URIs are supported,             which must be specified in the following format: ``gs://bucket-id/object-id``.         :type input_uri: str         :param input_content: The video data bytes.             If unset, the input video(s) should be specified via ``input_uri``.             If set, ``input_uri`` should be unset.         :type input_content: bytes         :param features: Requested video annotation features.         :type features: list[google.cloud.videointelligence_v1.VideoIntelligenceServiceClient.enums.Feature]         :param output_uri: Optional, location where the output (in JSON format) should be stored. Currently,             only Google Cloud Storage URIs are supported, which must be specified in the following format:             ``gs://bucket-id/object-id``.         :type output_uri: str         :param video_context: Optional, Additional video context and/or feature-specific parameters.         :type video_context: dict or google.cloud.videointelligence_v1.types.VideoContext         :param location: Optional, cloud region where annotation should take place. Supported cloud regions:             us-east1, us-west1, europe-west1, asia-east1.             If no region is specified, a region will be determined based on video file location.         :type location: str         :param retry: Retry object used to determine when/if to retry requests.             If None is specified, requests will not be retried.         :type retry: google.api_core.retry.Retry         :param timeout: Optional, The amount of time, in seconds, to wait for the request to complete.             Note that if retry is specified, the timeout applies to each individual attempt.         :type timeout: float         :param metadata: Optional, Additional metadata that is provided to the method.         :type metadata: seq[tuple[str, str]]
413	Get Opsgenie api_key for creating alert
414	Overwrite HttpHook get_conn because this hook just needs base_url         and headers, and does not need generic params          :param headers: additional headers to be passed through as a dictionary         :type headers: dict
415	Execute the Opsgenie Alert call          :param payload: Opsgenie API Create Alert payload values             See https://docs.opsgenie.com/docs/alert-api#section-create-alert         :type payload: dict
416	Construct the Opsgenie JSON payload. All relevant parameters are combined here         to a valid Opsgenie JSON payload.          :return: Opsgenie payload (dict) to send
417	Call the OpsgenieAlertHook to post message
418	check if aws conn exists already or create one and return it          :return: boto3 session
419	Run Presto query on athena with provided config and return submitted query_execution_id          :param query: Presto query to run         :type query: str         :param query_context: Context in which query need to be run         :type query_context: dict         :param result_configuration: Dict with path to store results in and config related to encryption         :type result_configuration: dict         :param client_request_token: Unique token created by user to avoid multiple executions of same query         :type client_request_token: str         :return: str
420	Fetch the status of submitted athena query. Returns None or one of valid query states.          :param query_execution_id: Id of submitted athena query         :type query_execution_id: str         :return: str
421	Poll the status of submitted athena query until query state reaches final state.         Returns one of the final states          :param query_execution_id: Id of submitted athena query         :type query_execution_id: str         :param max_tries: Number of times to poll for query state before function exits         :type max_tries: int         :return: str
422	Returns an SFTP connection object
423	Sleep for the time specified in the exception. If not specified, wait         for 60 seconds.
424	Call Zendesk API and return results          :param path: The Zendesk API to call         :param query: Query parameters         :param get_all_pages: Accumulate results over all pages before                returning. Due to strict rate limiting, this can often timeout.                Waits for recommended period between tries after a timeout.         :param side_loading: Retrieve related records as part of a single                request. In order to enable side-loading, add an 'include'                query parameter containing a comma-separated list of resources                to load. For more information on side-loading see                https://developer.zendesk.com/rest_api/docs/core/side_loading
425	Retrieves the partition values for a table.          :param database_name: The name of the catalog database where the partitions reside.         :type database_name: str         :param table_name: The name of the partitions' table.         :type table_name: str         :param expression: An expression filtering the partitions to be returned.             Please see official AWS documentation for further information.             https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-partitions.html#aws-glue-api-catalog-partitions-GetPartitions         :type expression: str         :param page_size: pagination size         :type page_size: int         :param max_items: maximum items to return         :type max_items: int         :return: set of partition values where each value is a tuple since             a partition may be composed of multiple columns. For example:             ``{('2018-01-01','1'), ('2018-01-01','2')}``
426	Get the information of the table          :param database_name: Name of hive database (schema) @table belongs to         :type database_name: str         :param table_name: Name of hive table         :type table_name: str         :rtype: dict          >>> hook = AwsGlueCatalogHook()         >>> r = hook.get_table('db', 'table_foo')         >>> r['Name'] = 'table_foo'
427	Get the physical location of the table          :param database_name: Name of hive database (schema) @table belongs to         :type database_name: str         :param table_name: Name of hive table         :type table_name: str         :return: str
428	Return status of a cluster          :param cluster_identifier: unique identifier of a cluster         :type cluster_identifier: str
429	Delete a cluster and optionally create a snapshot          :param cluster_identifier: unique identifier of a cluster         :type cluster_identifier: str         :param skip_final_cluster_snapshot: determines cluster snapshot creation         :type skip_final_cluster_snapshot: bool         :param final_cluster_snapshot_identifier: name of final cluster snapshot         :type final_cluster_snapshot_identifier: str
430	Gets a list of snapshots for a cluster          :param cluster_identifier: unique identifier of a cluster         :type cluster_identifier: str
431	Restores a cluster from its snapshot          :param cluster_identifier: unique identifier of a cluster         :type cluster_identifier: str         :param snapshot_identifier: unique identifier for a snapshot of a cluster         :type snapshot_identifier: str
432	Creates a snapshot of a cluster          :param snapshot_identifier: unique identifier for a snapshot of a cluster         :type snapshot_identifier: str         :param cluster_identifier: unique identifier of a cluster         :type cluster_identifier: str
433	SlackAPIOperator calls will not fail even if the call is not unsuccessful.         It should not prevent a DAG from completing in success
434	Creates a job flow using the config from the EMR connection.         Keys of the json extra hash may have the arguments of the boto3         run_job_flow method.         Overrides for this config may be passed as the job_flow_overrides.
435	Will test the filepath result and test if its size is at least self.filesize          :param result: a list of dicts returned by Snakebite ls         :param size: the file size in MB a file should be at least to trigger True         :return: (bool) depending on the matching criteria
436	Will filter if instructed to do so the result to remove matching criteria          :param result: list of dicts returned by Snakebite ls         :type result: list[dict]         :param ignored_ext: list of ignored extensions         :type ignored_ext: list         :param ignore_copying: shall we ignore ?         :type ignore_copying: bool         :return: list of dicts which were not removed         :rtype: list[dict]
437	Executed by task_instance at runtime
438	Get pool by a given name.
439	Create a pool with a given parameters.
440	Delete pool by a given name.
441	Converts a python dictionary to the proto supplied          :param py_dict: The dictionary to convert         :type py_dict: dict         :param proto: The proto object to merge with dictionary         :type proto: protobuf         :return: A parsed python dictionary in provided proto format         :raises:             ParseError: On JSON parsing problems.
442	Given an operation, continuously fetches the status from Google Cloud until either         completion or an error occurring          :param operation: The Operation to wait for         :type operation: google.cloud.container_V1.gapic.enums.Operation         :param project_id: Google Cloud Platform project ID         :type project_id: str         :return: A new, updated operation fetched from Google Cloud
443	Fetches the operation from Google Cloud          :param operation_name: Name of operation to fetch         :type operation_name: str         :param project_id: Google Cloud Platform project ID         :type project_id: str         :return: The new, updated operation from Google Cloud
444	Append labels to provided Cluster Protobuf          Labels must fit the regex ``[a-z]([-a-z0-9]*[a-z0-9])?`` (current          airflow version string follows semantic versioning spec: x.y.z).          :param cluster_proto: The proto to append resource_label airflow             version to         :type cluster_proto: google.cloud.container_v1.types.Cluster         :param key: The key label         :type key: str         :param val:         :type val: str         :return: The cluster proto updated with new label
445	Creates a cluster, consisting of the specified number and type of Google Compute         Engine instances.          :param cluster: A Cluster protobuf or dict. If dict is provided, it must             be of the same form as the protobuf message             :class:`google.cloud.container_v1.types.Cluster`         :type cluster: dict or google.cloud.container_v1.types.Cluster         :param project_id: Google Cloud Platform project ID         :type project_id: str         :param retry: A retry object (``google.api_core.retry.Retry``) used to             retry requests.             If None is specified, requests will not be retried.         :type retry: google.api_core.retry.Retry         :param timeout: The amount of time, in seconds, to wait for the request to             complete. Note that if retry is specified, the timeout applies to each             individual attempt.         :type timeout: float         :return: The full url to the new, or existing, cluster         :raises:             ParseError: On JSON parsing problems when trying to convert dict             AirflowException: cluster is not dict type nor Cluster proto type
446	Gets details of specified cluster          :param name: The name of the cluster to retrieve         :type name: str         :param project_id: Google Cloud Platform project ID         :type project_id: str         :param retry: A retry object used to retry requests. If None is specified,             requests will not be retried.         :type retry: google.api_core.retry.Retry         :param timeout: The amount of time, in seconds, to wait for the request to             complete. Note that if retry is specified, the timeout applies to each             individual attempt.         :type timeout: float         :return: google.cloud.container_v1.types.Cluster
447	Given a Discord http_conn_id, return the default webhook endpoint or override if a         webhook_endpoint is manually supplied.          :param http_conn_id: The provided connection ID         :param webhook_endpoint: The manually provided webhook endpoint         :return: Webhook endpoint (str) to use
448	Construct the Discord JSON payload. All relevant parameters are combined here         to a valid Discord JSON payload.          :return: Discord payload (str) to send
449	Execute the Discord webhook call
450	Encrypts a plaintext message using Google Cloud KMS.          :param key_name: The Resource Name for the key (or key version)                          to be used for encyption. Of the form                          ``projects/*/locations/*/keyRings/*/cryptoKeys/**``         :type key_name: str         :param plaintext: The message to be encrypted.         :type plaintext: bytes         :param authenticated_data: Optional additional authenticated data that                                    must also be provided to decrypt the message.         :type authenticated_data: bytes         :return: The base 64 encoded ciphertext of the original message.         :rtype: str
451	Imports table from remote location to target dir. Arguments are         copies of direct sqoop command line arguments          :param table: Table to read         :param target_dir: HDFS destination dir         :param append: Append data to an existing dataset in HDFS         :param file_type: "avro", "sequence", "text" or "parquet".             Imports data to into the specified format. Defaults to text.         :param columns: <col,col,col���> Columns to import from table         :param split_by: Column of the table used to split work units         :param where: WHERE clause to use during import         :param direct: Use direct connector if exists for the database         :param driver: Manually specify JDBC driver class to use         :param extra_import_options: Extra import options to pass as dict.             If a key doesn't have a value, just pass an empty string to it.             Don't include prefix of -- for sqoop options.
452	Imports a specific query from the rdbms to hdfs          :param query: Free format query to run         :param target_dir: HDFS destination dir         :param append: Append data to an existing dataset in HDFS         :param file_type: "avro", "sequence", "text" or "parquet"             Imports data to hdfs into the specified format. Defaults to text.         :param split_by: Column of the table used to split work units         :param direct: Use direct import fast path         :param driver: Manually specify JDBC driver class to use         :param extra_import_options: Extra import options to pass as dict.             If a key doesn't have a value, just pass an empty string to it.             Don't include prefix of -- for sqoop options.
453	Exports Hive table to remote location. Arguments are copies of direct         sqoop command line Arguments          :param table: Table remote destination         :param export_dir: Hive table to export         :param input_null_string: The string to be interpreted as null for             string columns         :param input_null_non_string: The string to be interpreted as null             for non-string columns         :param staging_table: The table in which data will be staged before             being inserted into the destination table         :param clear_staging_table: Indicate that any data present in the             staging table can be deleted         :param enclosed_by: Sets a required field enclosing character         :param escaped_by: Sets the escape character         :param input_fields_terminated_by: Sets the field separator character         :param input_lines_terminated_by: Sets the end-of-line character         :param input_optionally_enclosed_by: Sets a field enclosing character         :param batch: Use batch mode for underlying statement execution         :param relaxed_isolation: Transaction isolation to read uncommitted             for the mappers         :param extra_export_options: Extra export options to pass as dict.             If a key doesn't have a value, just pass an empty string to it.             Don't include prefix of -- for sqoop options.
454	Retrieves connection to Cloud Text to Speech.          :return: Google Cloud Text to Speech client object.         :rtype: google.cloud.texttospeech_v1.TextToSpeechClient
455	Synthesizes text input          :param input_data: text input to be synthesized. See more:             https://googleapis.github.io/google-cloud-python/latest/texttospeech/gapic/v1/types.html#google.cloud.texttospeech_v1.types.SynthesisInput         :type input_data: dict or google.cloud.texttospeech_v1.types.SynthesisInput         :param voice: configuration of voice to be used in synthesis. See more:             https://googleapis.github.io/google-cloud-python/latest/texttospeech/gapic/v1/types.html#google.cloud.texttospeech_v1.types.VoiceSelectionParams         :type voice: dict or google.cloud.texttospeech_v1.types.VoiceSelectionParams         :param audio_config: configuration of the synthesized audio. See more:             https://googleapis.github.io/google-cloud-python/latest/texttospeech/gapic/v1/types.html#google.cloud.texttospeech_v1.types.AudioConfig         :type audio_config: dict or google.cloud.texttospeech_v1.types.AudioConfig         :return: SynthesizeSpeechResponse See more:             https://googleapis.github.io/google-cloud-python/latest/texttospeech/gapic/v1/types.html#google.cloud.texttospeech_v1.types.SynthesizeSpeechResponse         :rtype: object         :param retry: (Optional) A retry object used to retry requests. If None is specified,                 requests will not be retried.         :type retry: google.api_core.retry.Retry         :param timeout: (Optional) The amount of time, in seconds, to wait for the request to complete.             Note that if retry is specified, the timeout applies to each individual attempt.         :type timeout: float
456	Close and upload local log file to remote storage S3.
457	When using git to retrieve the DAGs, use the GitSync Init Container
458	Defines any necessary environment variables for the pod executor
459	Defines any necessary secrets for the pod executor
460	Defines the security context
461	Get link to qubole command result page.          :param operator: operator         :param dttm: datetime         :return: url link
462	Heartbeats update the job's entry in the database with a timestamp         for the latest_heartbeat and allows for the job to be killed         externally. This allows at the system level to monitor what is         actually active.          For instance, an old heartbeat for SchedulerJob would mean something         is wrong.          This also allows for any job to be killed externally, regardless         of who is running it or on which machine it is running.          Note that if your heartbeat is set to 60 seconds and you call this         method after 10 seconds of processing since the last heartbeat, it         will sleep 50 seconds to complete the 60 seconds and keep a steady         heart rate. If you go over 60 seconds before calling it, it won't         sleep at all.
463	Launch a process to process the given file.          :param result_queue: the queue to use for passing back the result         :type result_queue: multiprocessing.Queue         :param file_path: the file to process         :type file_path: unicode         :param pickle_dags: whether to pickle the DAGs found in the file and             save them to the DB         :type pickle_dags: bool         :param dag_id_white_list: if specified, only examine DAG ID's that are             in this list         :type dag_id_white_list: list[unicode]         :param thread_name: the name to use for the process that is launched         :type thread_name: unicode         :return: the process that was launched         :rtype: multiprocessing.Process         :param zombies: zombie task instances to kill         :type zombies: list[airflow.utils.dag_processing.SimpleTaskInstance]
464	Launch the process and start processing the DAG.
465	Check if the process launched to process this file is done.          :return: whether the process is finished running         :rtype: bool
466	Helper method to clean up processor_agent to avoid leaving orphan processes.
467	For the DAGs in the given DagBag, record any associated import errors and clears         errors for files that no longer have them. These are usually displayed through the         Airflow UI so that users know that there are issues parsing DAGs.          :param session: session for ORM operations         :type session: sqlalchemy.orm.session.Session         :param dagbag: DagBag containing DAGs with import errors         :type dagbag: airflow.models.DagBag
468	This method schedules the tasks for a single DAG by looking at the         active DAG runs and adding task instances that should run to the         queue.
469	For all DAG IDs in the SimpleDagBag, look for task instances in the         old_states and set them to new_state if the corresponding DagRun         does not exist or exists but is not in the running state. This         normally should not happen, but it can if the state of DagRuns are         changed manually.          :param old_states: examine TaskInstances in this state         :type old_state: list[airflow.utils.state.State]         :param new_state: set TaskInstances to this state         :type new_state: airflow.utils.state.State         :param simple_dag_bag: TaskInstances associated with DAGs in the             simple_dag_bag and with states in the old_state will be examined         :type simple_dag_bag: airflow.utils.dag_processing.SimpleDagBag
470	Get the concurrency maps.          :param states: List of states to query for         :type states: list[airflow.utils.state.State]         :return: A map from (dag_id, task_id) to # of task instances and          a map from (dag_id, task_id) to # of task instances in the given state list         :rtype: dict[tuple[str, str], int]
471	Changes the state of task instances in the list with one of the given states         to QUEUED atomically, and returns the TIs changed in SimpleTaskInstance format.          :param task_instances: TaskInstances to change the state of         :type task_instances: list[airflow.models.TaskInstance]         :param acceptable_states: Filters the TaskInstances updated to be in these states         :type acceptable_states: Iterable[State]         :rtype: list[airflow.utils.dag_processing.SimpleTaskInstance]
472	Takes task_instances, which should have been set to queued, and enqueues them         with the executor.          :param simple_task_instances: TaskInstances to enqueue         :type simple_task_instances: list[SimpleTaskInstance]         :param simple_dag_bag: Should contains all of the task_instances' dags         :type simple_dag_bag: airflow.utils.dag_processing.SimpleDagBag
473	Attempts to execute TaskInstances that should be executed by the scheduler.          There are three steps:         1. Pick TIs by priority with the constraint that they are in the expected states         and that we do exceed max_active_runs or pool limits.         2. Change the state for the TIs above atomically.         3. Enqueue the TIs in the executor.          :param simple_dag_bag: TaskInstances associated with DAGs in the             simple_dag_bag will be fetched from the DB and executed         :type simple_dag_bag: airflow.utils.dag_processing.SimpleDagBag         :param states: Execute TaskInstances in these states         :type states: tuple[airflow.utils.state.State]         :return: Number of task instance with state changed.
474	If there are tasks left over in the executor,         we set them back to SCHEDULED to avoid creating hanging tasks.          :param session: session for ORM operations
475	Respond to executor events.
476	Process a Python file containing Airflow DAGs.          This includes:          1. Execute the file and look for DAG objects in the namespace.         2. Pickle the DAG and save it to the DB (if necessary).         3. For each DAG, see what tasks should run and create appropriate task         instances in the DB.         4. Record any errors importing the file into ORM         5. Kill (in ORM) any task instances belonging to the DAGs that haven't         issued a heartbeat in a while.          Returns a list of SimpleDag objects that represent the DAGs found in         the file          :param file_path: the path to the Python file that should be executed         :type file_path: unicode         :param zombies: zombie task instances to kill.         :type zombies: list[airflow.utils.dag_processing.SimpleTaskInstance]         :param pickle_dags: whether serialize the DAGs found in the file and             save them to the db         :type pickle_dags: bool         :return: a list of SimpleDags made from the Dags found in the file         :rtype: list[airflow.utils.dag_processing.SimpleDagBag]
477	Updates the counters per state of the tasks that were running. Can re-add         to tasks to run in case required.          :param ti_status: the internal status of the backfill job tasks         :type ti_status: BackfillJob._DagRunTaskStatus
478	Checks if the executor agrees with the state of task instances         that are running          :param running: dict of key, task to verify
479	Returns a dag run for the given run date, which will be matched to an existing         dag run if available or create a new dag run otherwise. If the max_active_runs         limit is reached, this function will return None.          :param run_date: the execution date for the dag run         :type run_date: datetime.datetime         :param session: the database session object         :type session: sqlalchemy.orm.session.Session         :return: a DagRun in state RUNNING or None
480	Returns a map of task instance key to task instance object for the tasks to         run in the given dag run.          :param dag_run: the dag run to get the tasks from         :type dag_run: airflow.models.DagRun         :param session: the database session object         :type session: sqlalchemy.orm.session.Session
481	Computes the dag runs and their respective task instances for         the given run dates and executes the task instances.         Returns a list of execution dates of the dag runs that were executed.          :param run_dates: Execution dates for dag runs         :type run_dates: list         :param ti_status: internal BackfillJob status structure to tis track progress         :type ti_status: BackfillJob._DagRunTaskStatus         :param executor: the executor to use, it must be previously started         :type executor: BaseExecutor         :param pickle_id: numeric id of the pickled dag, None if not pickled         :type pickle_id: int         :param start_date: backfill start date         :type start_date: datetime.datetime         :param session: the current session object         :type session: sqlalchemy.orm.session.Session
482	Go through the dag_runs and update the state based on the task_instance state.         Then set DAG runs that are not finished to failed.          :param dag_runs: DAG runs         :param session: session         :return: None
483	Initializes all components required to run a dag for a specified date range and         calls helper method to execute the tasks.
484	Self destruct task if state has been moved away from running externally
485	Provides a client for interacting with the Cloud Spanner API.          :param project_id: The ID of the  GCP project.         :type project_id: str         :return: google.cloud.spanner_v1.client.Client         :rtype: object
486	Gets information about a particular instance.          :param project_id: Optional, The ID of the  GCP project that owns the Cloud Spanner             database.  If set to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :param instance_id: The ID of the Cloud Spanner instance.         :type instance_id: str         :return: google.cloud.spanner_v1.instance.Instance         :rtype: object
487	Invokes a method on a given instance by applying a specified Callable.          :param project_id: The ID of the  GCP project that owns the Cloud Spanner             database.         :type project_id: str         :param instance_id: The ID of the instance.         :type instance_id: str         :param configuration_name: Name of the instance configuration defining how the             instance will be created. Required for instances which do not yet exist.         :type configuration_name: str         :param node_count: (Optional) Number of nodes allocated to the instance.         :type node_count: int         :param display_name: (Optional) The display name for the instance in the Cloud             Console UI. (Must be between 4 and 30 characters.) If this value is not set             in the constructor, will fall back to the instance ID.         :type display_name: str         :param func: Method of the instance to be called.         :type func: Callable
488	Creates a new Cloud Spanner instance.          :param instance_id: The ID of the Cloud Spanner instance.         :type instance_id: str         :param configuration_name: The name of the instance configuration defining how the             instance will be created. Possible configuration values can be retrieved via             https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instanceConfigs/list         :type configuration_name: str         :param node_count: (Optional) The number of nodes allocated to the Cloud Spanner             instance.         :type node_count: int         :param display_name: (Optional) The display name for the instance in the GCP             Console. Must be between 4 and 30 characters.  If this value is not set in             the constructor, the name falls back to the instance ID.         :type display_name: str         :param project_id: Optional, the ID of the  GCP project that owns the Cloud Spanner             database. If set to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
489	Updates an existing Cloud Spanner instance.          :param instance_id: The ID of the Cloud Spanner instance.         :type instance_id: str         :param configuration_name: The name of the instance configuration defining how the             instance will be created. Possible configuration values can be retrieved via             https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instanceConfigs/list         :type configuration_name: str         :param node_count: (Optional) The number of nodes allocated to the Cloud Spanner             instance.         :type node_count: int         :param display_name: (Optional) The display name for the instance in the GCP             Console. Must be between 4 and 30 characters. If this value is not set in             the constructor, the name falls back to the instance ID.         :type display_name: str         :param project_id: Optional, the ID of the  GCP project that owns the Cloud Spanner             database. If set to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
490	Deletes an existing Cloud Spanner instance.          :param instance_id: The ID of the Cloud Spanner instance.         :type instance_id: str         :param project_id: Optional, the ID of the GCP project that owns the Cloud Spanner             database. If set to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: None
491	Retrieves a database in Cloud Spanner. If the database does not exist         in the specified instance, it returns None.          :param instance_id: The ID of the Cloud Spanner instance.         :type instance_id: str         :param database_id: The ID of the database in Cloud Spanner.         :type database_id: str         :param project_id: Optional, the ID of the  GCP project that owns the Cloud Spanner             database. If set to None or missing, the default project_id from the GCP connection is used.         :type project_id: str         :return: Database object or None if database does not exist         :rtype: google.cloud.spanner_v1.database.Database or None
492	Creates a new database in Cloud Spanner.          :type project_id: str         :param instance_id: The ID of the Cloud Spanner instance.         :type instance_id: str         :param database_id: The ID of the database to create in Cloud Spanner.         :type database_id: str         :param ddl_statements: The string list containing DDL for the new database.         :type ddl_statements: list[str]         :param project_id: Optional, the ID of the  GCP project that owns the Cloud Spanner             database. If set to None or missing, the default project_id from the GCP connection is used.         :return: None
493	Updates DDL of a database in Cloud Spanner.          :type project_id: str         :param instance_id: The ID of the Cloud Spanner instance.         :type instance_id: str         :param database_id: The ID of the database in Cloud Spanner.         :type database_id: str         :param ddl_statements: The string list containing DDL for the new database.         :type ddl_statements: list[str]         :param project_id: Optional, the ID of the GCP project that owns the Cloud Spanner             database. If set to None or missing, the default project_id from the GCP connection is used.         :param operation_id: (Optional) The unique per database operation ID that can be             specified to implement idempotency check.         :type operation_id: str         :return: None
494	Drops a database in Cloud Spanner.          :type project_id: str         :param instance_id: The ID of the Cloud Spanner instance.         :type instance_id: str         :param database_id: The ID of the database in Cloud Spanner.         :type database_id: str         :param project_id: Optional, the ID of the  GCP project that owns the Cloud Spanner             database. If set to None or missing, the default project_id from the GCP connection is used.         :return: True if everything succeeded         :rtype: bool
495	Pokes for a mail attachment on the mail server.          :param context: The context that is being provided when poking.         :type context: dict         :return: True if attachment with the given name is present and False if not.         :rtype: bool
496	Creates additional_properties parameter based on language_hints, web_detection_params and     additional_properties parameters specified by the user
497	Returns a cassandra Session object
498	Checks if a table exists in Cassandra          :param table: Target Cassandra table.                       Use dot notation to target a specific keyspace.         :type table: str
499	Checks if a record exists in Cassandra          :param table: Target Cassandra table.                       Use dot notation to target a specific keyspace.         :type table: str         :param keys: The keys and their values to check the existence.         :type keys: dict
500	Construct the command to poll the driver status.          :return: full command to be executed
501	Remote Popen to execute the spark-submit job          :param application: Submitted application, jar or py file         :type application: str         :param kwargs: extra arguments to Popen (see subprocess.Popen)
502	Processes the log files and extracts useful information out of it.          If the deploy-mode is 'client', log the output of the submit command as those         are the output logs of the Spark worker directly.          Remark: If the driver needs to be tracked for its status, the log-level of the         spark deploy needs to be at least INFO (log4j.logger.org.apache.spark.deploy=INFO)          :param itr: An iterator which iterates over the input of the subprocess
503	parses the logs of the spark driver status query process          :param itr: An iterator which iterates over the input of the subprocess
504	Get the task runner that can be used to run the given job.      :param local_task_job: The LocalTaskJob associated with the TaskInstance         that needs to be executed.     :type local_task_job: airflow.jobs.LocalTaskJob     :return: The task runner to use to run the task.     :rtype: airflow.task.task_runner.base_task_runner.BaseTaskRunner
505	Try to use a waiter from the below pull request              * https://github.com/boto/botocore/pull/1307          If the waiter is not available apply a exponential backoff              * docs.aws.amazon.com/general/latest/gr/api-retries.html
506	Queries mysql and returns a cursor to the results.
507	Configure a csv writer with the file_handle and write schema         as headers for the new file.
508	Takes a cursor, and writes the BigQuery schema in .json format for the         results to a local file system.          :return: A dictionary where key is a filename to be used as an object             name in GCS, and values are file handles to local files that             contains the BigQuery schema fields in .json format.
509	Return a dict of column name and column type based on self.schema if not None.
510	Helper function that maps from MySQL fields to BigQuery fields. Used         when a schema_filename is set.
511	Execute sqoop job
512	Saves the lineage to XCom and if configured to do so sends it     to the backend.
513	Returns the extra property by deserializing json.
514	Get a set of dates as a list based on a start, end and delta, delta     can be something that can be added to `datetime.datetime`     or a cron expression as a `str`      :Example::          date_range(datetime(2016, 1, 1), datetime(2016, 1, 3), delta=timedelta(1))             [datetime.datetime(2016, 1, 1, 0, 0), datetime.datetime(2016, 1, 2, 0, 0),             datetime.datetime(2016, 1, 3, 0, 0)]         date_range(datetime(2016, 1, 1), datetime(2016, 1, 3), delta='0 0 * * *')             [datetime.datetime(2016, 1, 1, 0, 0), datetime.datetime(2016, 1, 2, 0, 0),             datetime.datetime(2016, 1, 3, 0, 0)]         date_range(datetime(2016, 1, 1), datetime(2016, 3, 3), delta="0 0 0 * *")             [datetime.datetime(2016, 1, 1, 0, 0), datetime.datetime(2016, 2, 1, 0, 0),             datetime.datetime(2016, 3, 1, 0, 0)]      :param start_date: anchor date to start the series from     :type start_date: datetime.datetime     :param end_date: right boundary for the date range     :type end_date: datetime.datetime     :param num: alternatively to end_date, you can specify the number of         number of entries you want in the range. This number can be negative,         output will always be sorted regardless     :type num: int
515	Convert an array of time durations in seconds to the specified time unit.
516	Get a datetime object representing `n` days ago. By default the time is     set to midnight.
517	Initialize the role with the permissions and related view-menus.          :param role_name:         :param role_vms:         :param role_perms:         :return:
518	Delete the given Role          :param role_name: the name of a role in the ab_role table
519	Get all the roles associated with the user.          :param user: the ab_user in FAB model.         :return: a list of roles associated with the user.
520	Returns a set of tuples with the perm name and view menu name
521	Whether the user has this role name
522	Whether the user has this perm
523	FAB leaves faulty permissions that need to be cleaned up
524	Add the new permission , view_menu to ab_permission_view_role if not exists.         It will add the related entry to ab_permission         and ab_view_menu two meta tables as well.          :param permission_name: Name of the permission.         :type permission_name: str         :param view_menu_name: Name of the view-menu         :type view_menu_name: str         :return:
525	Admin should have all the permission-views.         Add the missing ones to the table for admin.          :return: None.
526	Set the access policy on the given DAG's ViewModel.          :param dag_id: the ID of the DAG whose permissions should be updated         :type dag_id: string         :param access_control: a dict where each key is a rolename and             each value is a set() of permission names (e.g.,             {'can_dag_read'}         :type access_control: dict
527	Create perm-vm if not exist and insert into FAB security model for all-dags.
528	Deferred load of Fernet key.      This function could fail either because Cryptography is not installed     or because the Fernet key is invalid.      :return: Fernet object     :raises: airflow.exceptions.AirflowException if there's a problem trying to load Fernet
529	Checks for existence of the partition in the AWS Glue Catalog table
530	Gets the AwsGlueCatalogHook
531	Check for message on subscribed queue and write to xcom the message with key ``messages``          :param context: the context object         :type context: dict         :return: ``True`` if message is available or ``False``
532	Returns a snakebite HDFSClient object.
533	Establishes a connection depending on the security mode set via config or environment variable.          :return: a hdfscli InsecureClient or KerberosClient object.         :rtype: hdfs.InsecureClient or hdfs.ext.kerberos.KerberosClient
534	Check for the existence of a path in HDFS by querying FileStatus.          :param hdfs_path: The path to check.         :type hdfs_path: str         :return: True if the path exists and False if not.         :rtype: bool
535	r"""         Uploads a file to HDFS.          :param source: Local path to file or folder.             If it's a folder, all the files inside of it will be uploaded.             .. note:: This implies that folders empty of files will not be created remotely.          :type source: str         :param destination: PTarget HDFS path.             If it already exists and is a directory, files will be uploaded inside.         :type destination: str         :param overwrite: Overwrite any existing file or directory.         :type overwrite: bool         :param parallelism: Number of threads to use for parallelization.             A value of `0` (or negative) uses as many threads as there are files.         :type parallelism: int         :param \**kwargs: Keyword arguments forwarded to :meth:`hdfs.client.Client.upload`.
536	Establish a connection to pinot broker through pinot dbqpi.
537	Get the connection uri for pinot broker.          e.g: http://localhost:9000/pql
538	Convert native python ``datetime.date`` object  to a format supported by the API